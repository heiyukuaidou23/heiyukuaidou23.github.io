[{"title":"36氪逆向","url":"/2023/11/29/36kr%E9%80%86%E5%90%91/","content":"一、36氪看《完蛋！我被美女包围了》如何教“影视综”做人-36氪 (36kr.com)1.需要逆向的值：\n在静态页面里的响应加密；\n\n2.逆向过程；\n在数据接口中，我们找不到数据的返回，那么此时我们就可以怀疑是不是在静态页面藏着了，往下找，可以找到一串密文，此时我们暂且认为它就是我们需要的数据；\n\n\n\n\n找到了数据就可以着手开始解密了，搜索decrypt(方法，可以找到三个相应的地方，分别打上断点；\n断住后可以明显看到，AES加密；re是我们的密文数据，ne在上方有声明；\n\n\n\n\n在控制台输出结果，很明显，将方法扣下来，再导入标准算法包即可解决；\n\n\n\n\n至此数据解密完成；\n\n","categories":["响应解密"],"tags":["web逆向"]},{"title":"99安全网逆向登录","url":"/2023/11/29/99%E5%AE%89%E5%85%A8%E7%BD%91%E9%80%86%E5%90%91%E7%99%BB%E5%BD%95/","content":"一、99安全网https://aq.99.com/V3/NDUser_Login.htm1.需要逆向的参数：\n表单：txtPassword\n\n2.逆向过程：\n直接搜索关键字，只有一个结果，比较好找；\n\n\n\n\n就在其上方就可以找到我们的加密方法，可以看到我们的加密方法是getMD5Value，那么我们进去看看他是做了些什么；\n\n\n\n\n这里的data就是我们的明文密码，return了我们的密文，那么可以看到还有一个MD5方法处理了我们的参数，进去看看，其实就在上方，将这些方法都拿下来，运行后报错什么都去补上即可；\n\n\n\n\n至此加密完成；\n\n\n","categories":["参数加密"],"tags":["登录逆向"]},{"title":"BTC逆向","url":"/2023/11/28/BTC%E5%8C%BA%E5%9D%97%E9%93%BE%E9%80%86%E5%90%91/","content":"一、BTCBitcoin浏览器交易列表 | page区块链浏览器 (oklink.com)1.需要逆向的参数：\n请求头：X-Apikey\n\n2.逆向过程：\n首先进行关键字搜索，发现只有一个结果，进行断点并未断住，那么我们可以去跟栈，但是这里跟栈也不是很好跟，在搜索的时候，往往可以发挥想象，如果正常搜不到我们可以去掉一个x再来搜索，这次结果比较多，并且通过调试我们应该是找到了我们需要的加密位置；\n\n\n\n\n对这个方法进行分析，t就是时间戳，e是通过另一个方法来获取的值，然后通过一个方法来处理了我们的t值，最后通过comb方法处理这两个参数；那么在这里我们需要扣的方法就有三个；\n首先我们来看encryptApiKey()方法，其实在上面这种函数的表达形式形式就可以看出来，大概都是在同一个文件里，我们进入方法里去看看；\n\n\n\n\n在这里扣代码的时候要注意观察代码，在里面是调用了一个api_key的，所以我们将它一同拿下来；\n然后就是encryptTime和comb这两个函数，我们将他们一起拿下来，\n\n\n\n\n至此我们的方法就都拿下来了，但在运行的时候我们会有需要注意的地方，在浏览器扣的时候，他是使用this.方法的形式去调用，此调用形式是由于他在这个对象里调用，很显然我们运行的时候不能这么调用，所以带有this的我们需要将它去掉再运行；\n在这里会报错i；\n\n\n\n\n选中i.Z可以看到它其实是一个浏览器window对象，btoa是它里面的方法，在这里我们有两种方法：\n\n\n 将i.Z直接删除，或许nodejs也有自带这个方法，所以它能够执行；\n 既然它是window，那么我们直接改成window，在顶部定义window &#x3D; global；定义为全局变量；\n\n\n再次运行即可完成加密；\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"丁香园逆向","url":"/2023/12/24/%E4%B8%81%E9%A6%99%E5%9B%AD%E9%80%86%E5%90%91/","content":"一、丁香园https://www.dxy.cn/bbs/newweb/pc/home1.需要逆向的参数：\n表单参数：\n\n\n\n2.逆向思路：\n首先我们可以直接搜索，因为关键字足够多，我们在这里选择搜索non这个参数，很容易就能找到加密位置，我们需要的参数都在；\n\n\n\n\n此时我们可以观察一下sign这个参数的位数，它是40位，那么我们就可以首先进行猜测，他有没有可能是sha1加密，因为sha1就是40位的加密结果，在后续进行处理的时候可以去测试一下；\n首先来看nonce这个参数，可以看到具体的方法是u，我们进去看看是什么；\n\n\n\n\n可以看到其实就是一个随机的，可以直接拿下来使用，也可以用一个固定的，接下来就去看那两个时间戳，在这里我们就需要进行分析了；\na是一个时间戳没有疑问，那么最后的timestamp是a加上一个l，那么这个L参数也在上方有生成，在这里就会有第一个坑；\n\n\n\n\n在这里很明显它是一个随机的，但通过下一行代码的调试，其实这个L是一个固定的数，也就是它并没有走上面的那一句，所以我们只需要固定即可，而服务器时间戳，很明显我们好像没有办法定位他的生成，所以我们也自己给它生成一个，这样就可以得到这两个时间戳；\n\n\n\n\n那么就只剩最后一个sign参数，像这种时效性参数，很大概率就是由消息摘要算法生成的，而上述我们分析的sha1也就是其中一种，我们可以看看sign的生成；\nsign的生成是由s方法得到的，传了一个参数f，可以看看f是哪些内容；\n\n\n\n\n我们可以看到，这里的两个f是不一样的参数，很多时候都会有这种情况，这是由于多个数据接口都经过了这个算法生成了sign这个参数，在我们做的时候需要认准参数；\n这里的appkey是固定的，而其他的参数我们也都有了，就可以去看加密方法了；但是我们可以猜测，它有没有可能是sha1加密算法；\n\n\n\n\n那么其实它也就是sha1加密算法，那也就没有必要再去扣代码，直接标准算法库就行了；当然也有其他的依据；\n\n\n\n\n可以去搜索，这是sha1的初始化常量，百度一个源码可以进行对比，也可以确定它是sha1；那么四个参数都已经生成；\n\n\n\n\njs代码实现如下：\n\n//coding: utf-8//File:1.参数加密.js//Author:下雨天//Date:2023/12/14 15:20const crypto = require(&#x27;crypto&#x27;);timestamp = Date.now()server_timestamp = Date.parse(new Date())console.log(&#x27;服务器&#x27;,server_timestamp);console.log(&#x27;正常&#x27;,timestamp);a = timestamp - 81console.log(&#x27;结果&#x27;,a);function u() &#123;    for (var e = arguments.length &gt; 0 &amp;&amp; void 0 !== arguments[0] ? arguments[0] : 8, t = arguments.length &gt; 1 &amp;&amp; void 0 !== arguments[1] ? arguments[1] : &quot;alphabet&quot;, n = &quot;&quot;, r = &#123;        alphabet: &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;,        number: &quot;0123456789&quot;    &#125;[t], o = 0; o &lt; e; o++)        n += r.charAt(Math.floor(Math.random() * r.length));    return n&#125;noncestr = u(8, &quot;number&quot;);console.log(&#x27;noncestr的值&#x27;,noncestr);// 创建一个sha1哈希对象const sha1Hash = crypto.createHash(&#x27;sha1&#x27;);data = &#x27;appSignKey=4bTogwpz7RzNO2VTFtW7zcfRkAE97ox6ZSgcQi7FgYdqrHqKB7aGqEZ4o7yssa2aEXoV3bQwh12FFgVNlpyYk2Yjm9d2EZGeGu3&amp;noncestr=&#x27;+noncestr+&#x27;&amp;pageSize=10&amp;refresh=false&amp;serverTimestamp=&#x27;+server_timestamp+&#x27;&amp;timestamp=&#x27;+timestamp+&#x27;&#x27;sha1Hash.update(data);const encryptedData = sha1Hash.digest(&#x27;hex&#x27;);console.log(&#x27;SHA-1结果:&#x27;, encryptedData);\n\n\n至此逆向结束；\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"virustotal搜索逆向","url":"/2023/12/24/virustotal%E6%90%9C%E7%B4%A2/","content":"一、virustotal搜索https://www.virustotal.com/gui/search/1/comments1.需要逆向的参数：\n请求头：X-Vt-Anti-Abuse-Header\n\n2.逆向思路：\n直接搜索大法，然后在唯一的位置打断点，就会发现一个很神奇的事情，它会自动跳转；\n\n\n\n\n无论我们如何断点都无法成功，这里需要打开设置，进入之后关闭启用js源代码映射；\n\n\n\n\n效果如下：\n\n\n\n\n此时回退就可以发现断点成功的打上了，就可以进行分析了；\n\n\n\n\n那么此时进行页面刷新就可以成功断住，我们就可以进行分析，它是通过computeAntiAbuseHeader这个方法生成的，并没有传入参数，所以我们进入内部看看具体做了什么；\n进入后在结尾处打上断点，然后让程序走进来；\n\n\n\n\n此时我们可以看到参数已经生成，就是对时间戳的一些处理，将方法拿下来即可；\n实现结果如下：\n\n\n\n\n至此逆向完成；\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"上海海事局逆向","url":"/2023/11/30/%E4%B8%8A%E6%B5%B7%E6%B5%B7%E4%BA%8B%E5%B1%80%E9%80%86%E5%90%91%E7%99%BB%E5%BD%95/","content":"一、上海海事局https://www.sh.msa.gov.cn/zwzx/login1.需要逆向的参数：\n表单：\n\n​\t\t-user_name  -password  -login_code\n2.逆向过程：\n直接跟栈，进入其实就直接能看到加密位置；\n\n\n\n\n我们需要的三个参数都在这里，在这里其实code这个参数是验证码的加密，所以后续肯定是变化的，在这里我们直接固定测试；\n经过调试其实可以发现真正加密其实是下面这三行，那么我们进行相应的分析；\n\npass = encrypt.encrypt(hash);user_name = encrypt.encrypt(username);login_code = encrypt.encrypt(logincode);\n\n\n密码加密的是一段hash，我们不知道是啥，是一段密文，我们往上找找，因为我输入的密码是123456，其实很明显他就是做了一个md5加密；\n\n\n\n\npassword即是明文，剩下两个都是传的明文，我们直接去找加密方法，它们三个可以看到都是同一个加密方法，看到var encrypt &#x3D; new JSEncrypt()，其实我们就直接去拿全部代码就好了；\n将公钥拿下来，他直接可以使用，再是先对密码进行一个MD5加密，再加密加密后的值，再补上相应的东西即可；\n\n\n\n\n至此加密完成；\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"七麦数据逆向","url":"/2023/12/24/%E4%B8%83%E9%BA%A6%E6%95%B0%E6%8D%AE/","content":"一、七麦数据https://www.qimai.cn/rank1.需要逆向的参数：\n表单参数：analysis\n\n2.逆向思路：\n首先直接搜索关键字，发现无法定位加密位置，那么就有可能是进行了混淆，所以我们可以选择跟栈，也可以先来观察启动器，去看他的堆栈；\n\n\n\n\n可以看到是进行了异步加载，那么我们就可以去看它的拦截器，有可能是在拦截器里进行的加载；从request栈进入，打上断点进行下滑触发，就可以断住，那么我们就可以去看他的容器，在这里也就是t；\n\n\n\n\n进去找拦截器，在这里我们需要的是请求拦截器，一般就在前面两个；\n\n\n\n\n其实可以看到也是进行了混淆，但是还是可以看到这里就是拦截器，那么在这里我们单步执行，此时观察作用域，看参数是否会发生变化；\n\n\n\n\n很容易就能看到参数在这里生成，那么将这个函数先拿下来，很明显这里是进行了混淆，我们首先就需要解混淆；这里解混淆就是去浏览器将正确的值拿下来；解完后的代码如下：\n\n\n\n\n那么可以看到里面是有确实方法的，所以我们去把方法拿下来，并再次进行解混淆操作；如下：\n\n\n\n\n在整个代码中，s函数的结果均为undfinend，所以我们判断s的值不影响，直接去掉即可；最后就可以运行打印e值；\n\n\n\n\n进行测试，看是否能拿到数据；\n\n\n\n\n可以看到数据成功返回，那么参数逆向就完成了；\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"中国平煤神马报逆向","url":"/2023/12/13/%E4%B8%AD%E5%9B%BD%E5%B9%B3%E7%85%A4%E7%A5%9E%E9%A9%AC%E6%8A%A5%E9%80%86%E5%90%91/","content":"一、中国平煤神马报https://www.pdskgb.com/home/87043_pdsmk.html1.需要逆向的参数：\n表单参数：sign\n\n2.逆向思路：\n首先 我们可以直接搜索关键字，一共就两个地方，直接分别打上断点；\n\n\n\n\n鼠标下滑可以成功断住，此时我们就可以来进行分析；\n\n\n\n\n可以看到这个_就是我们的参数，看名字好像是对一些东西进行了sha1加密，那么我们就需要去分析里面的参数了；\n\n\n\n\n第一个参数很明显不应该是固定的，所以我们就需要去看他的生成位置，它是取的b里面的srckey，所以我们是需要去找b的生成；在上方就可以看到b的生成，并且后面的deviceid也是在b里面，所以我们先去看b的生成；\n\n\n\n\n这就是b的生成，传的两个参数都是固定的，在后面的对象里就有srckey的生成，由n、r、o、t四个值相加，所以我们直接将代码拿下来；\n此时我们下来观察n，n是由传进来的参数进行两次md5得到的结果，那么导入标准算法库就可以实现，其次是r的值，很明显这里的随机方法我们需要去扣下来；\n\n\n\n\n将需要的方法都拿下来之后就可以正确的生成我们的scrkey参数，所以此时我们需要生成deviceid的值，在这里我们需要对环境有一点了解；\n\n\n\n\n我们就需要来读懂这一行代码，首先对a的赋值是在上方，会在浏览器环境取到deviceid的值，可以将它认为是cookie中的值，但在我们的node中很明显就没有这个东西，所以它return语句说的是没有a的话就执行后面的语句，然后再将结果给环境，所以我们可以直接执行md5那句代码，也就能得到我们的结果，在这里也可以进行测试，将cookie清空后执行就可以看到程序会走md5那句代码，而如果已经有值就会直接去取值；\n\n\n\n\n所以我们就可以生成这两个参数；\n\n\n\n\n那么又回到外部，我们一共需要给它八个参数，我们已经解决两个，继续看其他参数；\n\n\n\n\n这里其实也很简单了，后续的参数差不多都是固定的，直接使用即可，所以就只剩下最后一个参数；\n\n\n\n\n在这里很明显它是执行的m，所以我们需要去找m的生成，m的生成其实也很简单；\n\n\n\n\n上方一共有两个m的生成位置，我们不知道他走的是哪一个，所以就需要都打上断点然后看程序怎么执行，操作后我们发现他走的是第一个，我们观察后发现它依然是环境取值，所以我们在本地就肯定得走下面的语句，在浏览器清空cookie后再次运行就可以发现它走了h.getToken(t.sid)这个方法，我们进去看看；\n\n\n\n\n大致可以看到他做的事情就是发了一个post请求，拿了一些参数去请求，此时的sign需要看清楚，和外部是不一样的，我们正常来说就会得到一个getapptoken的包；\n\n\n\n\n那么这就是m的生成，我们只需要拿到token值就可以去得到m，然后就可以得到真正的sign值，具体思路就是这样；\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"中国土地网逆向","url":"/2023/11/28/%E4%B8%AD%E5%9B%BD%E5%9C%9F%E5%9C%B0%E7%BD%91%E9%80%86%E5%90%91/","content":"一、中国土地网中国土地市场网 (landchina.com)1.需要逆向的参数：\n请求头Hash；\n\n2.逆向过程：\n在开始逆向时，hash关键词可以告诉我们什么，它必然不简单，使用.length方法来判断一下它的长度，结果是64位，由此可以得知它大概是sha加密算法；md5一般则是32位；（消息摘要算法）\n首先进行关键字搜索，搜索结果太多，这种方法不好使；在此我们可以使用追栈的方法；\n从启动程序进入，打上断点，进行分页；此时断住，\n\n\n\n\n在右侧堆栈我们可以看到有异步回调，在request里一般包含了拦截器，一般又分为响应和请求拦截器，但是很显然响应拦截器跟我们没什么关系；\n点击request进入，打上断点，进行分页，然后观察作用域的p里面包含的方法，\n\n\n\n\n从里面的方法进去(0，1)其余是响应拦截器，可以看出是一个请求拦截器，在拦截器处进行断点，此时放掉上一步的断点；进行分页，此时断点位置应该是return处；\n\n\n\n\n断住后将return的内容在控制台打印，发现是一个类似于数组的东西，此时我们将其toSting()转变一下，可以看出就是我们需要的东西；\n分析到此处，其实可以明白，这即是我们需要的加密方法；将主体方法扣下来；并将需要的参数取值拿下来；\n此时可以看出，n即为我们的加密函数，所以我们进去一探究竟；\n\n\n\n\n进入函数之后我们发现他是为一个初始化方法，在一般情况，此时我们点击箭头处进行下一步，观察它在哪一个对象进行的初始化操作，观察作用域；\n\n\n\n\n我们可以发现，此时作用域有值了，我们继续下一步走出这个方法；\n\n\n\n\n\n\n走出之后很显然，是SHA256，与我们刚开始的猜想是一致的；那接下来就很显然了，导入标准算法包，然后编写一个sha256加密算法，将n替换，即可完成；\n\nconst CryptJS = require(&#x27;crypto-js&#x27;)function sha256(text)&#123;    encryt1 = CryptJS.SHA256(text).toString()    return encryt1&#125;\n\n\n\n\n自此加密完成；\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"中国五矿逆向","url":"/2023/11/28/%E4%B8%AD%E5%9B%BD%E4%BA%94%E7%9F%BF%E9%80%86%E5%90%91/","content":"一、中国五矿中国五矿集团有限公司采购电子商务平台 (minmetals.com.cn)1.需要逆向的值：\nparam，位于表单参数；\n\n2.进行逆向：\n首先观察发的包，可以看到有个public公钥文件，由于没有混淆，所以可以直接搜索param参数来进行查找，但很显然关键词太过于宽泛，所以我们不使用这个方法；\n所以我们搜索公钥的路径，因为公钥在每一次加载的时候都会一起加载，所以必然是有用的；搜索后定位到一处，打断点可以断住，那在此处进行分析；\n\n\n\n\n通过调试，可以找到s即为我们要的param参数，在作用域处可以看出公钥也在一起加载；\n\n在这里，将主体加密方法扣下来\n  t.setPublicKey(r),   //公钥的载入a = m(m(&#123;&#125;, e), &#123;&#125;, &#123;    sign: f()(JSON.stringify(e)),    timeStamp: +new Date&#125;),s = t.encryptLong(JSON.stringify(a))\n\n\nr为我们的公钥，它必然是随机的，但在此处先将其固定，后续再做处理；具体的逻辑为：\n\n先生成a值，再对a值进行处理生成s；\n\n\n首先对t进行处理，向上找到t的生成；\n\n\nt = new v[&quot;a&quot;]\n\n\n再往上找，可以看出，为webpack；\n\n\n\n\n所以我们的逻辑就是先找此处的t，找到之后再对9816进行补全；\n将断点放掉，刷新，注意，此时分页无法在此处断住，刷新即可；鼠标放在t处，进入程序的入口；\n找到后我们就可以开始扣代码，但不能全扣，图中即是我们需要扣下来的代码；\n\n\n\n\n扣下来之后，在末尾跟上 ({}) ，随后选中t(“9816”)进入其函数，搜索9816，将其拿下来，拿下来后放在上述添加的大括号里，并在函数前加上一个！将其改为自调用函数，（其原是多文件webpack，我们扣下来之后他是单文件，所以我们需要将其改为多文件）；\n此时运行，报错window，这是由于我们引用多文件时没有引用到，可以在顶部加上如下代码：\n\nwindow = global; //全局变量\n\n\n再次运行，t未被定义，此时我们在自执行函数上方声明一个zt；再内部接受我们的加载器，在此处即为o；\n\nvar zt;\n\n\n\n\n报错时，在报错处打印下标，进行调试，\n\n\n\n\n调试后发现还调用了a524，所以我们将它拿下来，拿下来之后报错m没有被定义，此时回到源代码处寻找m的逻辑，将其扣下来；\n\n\n\n\n\n\n运行后，报错为e没有被定义，此时将程序放掉，重新分页，确保此时是我们需要的接口；在控制台输出e值大概看出来应该为我们的参数，将其复制并进行声明；\n再次运行报错d，可以看出是m里报错，所以我们进入m函数里进行查找，可以发现d函数就在m上方，将其拿下来；后续报错b，发现b也在下方，将其拿下；\n之后f没有被定义，我们选中f()，进入函数内部，\n\n\n\n\n毫无疑问，md5加密，加密了t和e值；打上断点走进来，发现t为我们的参数，我们将t值进行复制，找一个在线md5加密来进行验证，看他是不是标准的md5加密；通过实验可以看出，其是为标准的md5加密；\n\n在此时我们就可以直接导包来解决，并写上一个md5的加密，再进行替换：\n\n\n\n\n\n\n\n此时，t.encryptLong 未被定义，我们一样去寻找，将程序走到相应的位置，进入函数进行扣取；\n运行后报错w，同样的逻辑，去找到他的函数定义，扣下来即可；\n\n\n\n\n参数生成成功；\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"中国移动139邮箱逆向登录","url":"/2023/12/05/%E4%B8%AD%E5%9B%BD%E7%A7%BB%E5%8A%A8139%E9%82%AE%E7%AE%B1%E9%80%86%E5%90%91%E7%99%BB%E5%BD%95/","content":"一、中国移动139邮箱http://mail.10086.cn/default.html?&amp;s=0&amp;v=0&amp;u=MTczMjA0Njk0OTc=&amp;m=1&amp;ec=S001&amp;resource=indexLogin&amp;cguid=1528320368532&amp;mtime=251.需要逆向的参数：\n表单参数：Password\n\n2.逆向过程：\n我们可以看到它又是一个表单请求，没有办法跟栈，那么我们直接去元素面板找到它的输入框，去找它的唯一标识，class或者id，在此处我们选择它的id：txtPass；进行搜索之后去找它的加密方法；\n\n\n\n\n很显然这里就是它的加密位置，.value很明显就是我们的密码，它进行了一个拼接，再被进行了处理，那么主体方法其实就已经得到了，我们将它拿下来，那么此时就可以去找它的加密函数了，我们进去看看它是干了什么事情；\n\n\n\n\n可以看到这里是一个window.什么方法，我们尝试直接将它拿下看看会不会报错，此时肯定会报错，报错window我们补上即可，经过观察我们可以看到他其实是在一个自执行方法里，那么就很简单了，直接将整个自执行拿下来，再次运行即可；在此处其实我们可以看出他就是一个webpack类似的，内部函数外部调用，那为何我们这里不用导出加载器，是因为定义的就是window全局，那自然也就不用导出了；\n\n\n\n\n至此加密完成；其实他是一个sha1加密，我们也可以直接套库；\n\n","categories":["参数加密"],"tags":["登录逆向"]},{"title":"中国观鸟记录中心逆向","url":"/2023/11/28/%E4%B8%AD%E5%9B%BD%E8%A7%82%E9%B8%9F%E8%AE%B0%E5%BD%95%E4%B8%AD%E5%BF%83%E9%80%86%E5%90%91/","content":"一、中国观鸟记录中心http://www.birdreport.cn/home/activity/page.html1.需要逆向的参数：\n请求头：Sign、Requestid\n表单加密\n响应解密\n\n2.逆向过程：\n首先可以搜索一下sign，发现是没有办法进行定位的，所以在这里我们选择hook；随意找一个jsonhook脚本即可；\n\n\n\n\n在这里我们的hook代码如上图，注意此时不能刷新，否则hook代码会失效，运行我们的hook代码后进行分页，此时就可以断住；\n\n\n\n\n可以看到我们hook到的参数就是我们的表单数据，那么证明我们找对地方了，此时有两种方法：\n\n\n 单步调试将这个hook代码走完，直到它跳转；\n 直接向上跟一栈；\n\n\n此时我们可以看到e是我们的明文参数，加密之后的结果就是它运行后的结果，那么表单的加密也就是在这里；\n\n\n\n\n那么在这里我们可以看到在上方有一个公钥信息，其实很明显，他就是一个RSA加密；\n\n\n\n\n我们将需要的代码扣下来，然后给它定义，var JSEncrypt &#x3D; require(‘node-jsencrypt’);那么表单的加密就可以完成；\n其实请求头的两个参数也很明显，d就是我们的Requestid，f就是Sign参数，它们的生成也在上方，将具体的方法拿下来就可以了；\n在这里其实可以发现里面是有用到其他的方法，其实也就在上方，将它们也都拿下来，那么就只剩sign参数了，我们可以看到它是由MD5函数加密了edc三个参数，其实它应该就是标准加密，我们可以测试一下，经过测试我们可以确定他就是标准加密，那么我们直接导包就可以了；\n那么三个参数就都解决了；\n\n\n\n\n那么我们就可以来看响应的解密了，在这里我们可以去搜索，但我们依然选择hook的方式，使用另一个代码；\n\n\n\n\n很明显我们已经定位到我们的解密位置，我们直接进入那个方法就可以了；\n\n\n\n\n进入后其实也很明显了，就是一个AES解密，直接将这里的key和iv固定使用即可；\n\n\n\n\n至此逆向完成；\n\n","categories":["参数加密&响应解密"],"tags":["web逆向"]},{"title":"丰巢逆向登录","url":"/2023/11/29/%E4%B8%B0%E5%B7%A2%E9%80%86%E5%90%91%E7%99%BB%E5%BD%95/","content":"一、丰巢丰巢官网—丰巢自助寄快递服务 (fcbox.com)1.需要逆向的参数：\n表单：password\n\n2.逆向过程：\n直接启动器跟栈，进去之后打断点向上跟，\n\n\n\n\n向上跟一栈就很容易找到加密的位置，打上断点并将上一个断点释放，我们看看这里是不是真正的加密位置，很明显他就是我们的加密位置，那么只需要去扣方法了；\n\n\n\n\n进入方法后很明显可以看出ze是一个加载器，这看着像是一个webpack，最后面必然是导出了这个ze，在这里我们直接将全部代码扣下来即可；\n运行后报错，此时我们选择自己来导出这个加载器，使用window.JSEncrypt &#x3D; ze来导出，在上方补上相应的环境即可；在观察代码时可以发现有一个公钥，我们可以去找找，其实他是另一个请求返回的，它有可能是固定的，也有可能是变的，但在这里我们将它固定使用；\n\n\n\n\n至此加密完成；\n\n","categories":["参数加密"],"tags":["登录逆向"]},{"title":"产业政策大数据平台逆向","url":"/2023/12/24/%E4%BA%A7%E4%B8%9A%E6%94%BF%E7%AD%96%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0/","content":"一、产业政策大数据平台http://www.spolicy.com/typePolicy?id=6&amp;name=%E5%85%AC%E7%A4%BA%E5%85%AC%E5%91%8A1.需要逆向的参数：\n表单参数；\n\n2.逆向思路：\n首先打开抓包页面就可以看到一个无限debugger，在这里我们使用hook的方式来过；\n\n\n\n\nhook代码如下：\n\n// 变量 构造器AAA = Function.prototype.constructor;Function.prototype.constructor = function (a) &#123;    if (a == &#x27;debugger&#x27;)&#123;        return function ()&#123;&#125;;        &#125;        return AAA(a);&#125;;\n\n\n或者去李玺老师博客找更好的hook代码：http://cnlans.com/lx/tools/jshook\n\n将这段代码复制到控制台运行或者新建代码段执行，我推荐第二种；执行后即可过掉debuuger；\n\n我们向下翻页，可以发现一个没有见过的加密参数；\n\n\n\n\n\n有一点像乱码，那么我们就要去找到它的生成位置；在以往来说，这种表单参数没有关键词的时候，且是异步加载时，我们可以去找他的拦截器关键词，但在这里没有办法直接搜索，因为它是经过混淆的，但这个思想在其他地方适用；\n在这里我们就可以去下xhr断点，之后进行分页，此时断住；\n\n\n\n\n点击异步栈的第一栈，也就是箭头的指向；进入之后打上断点，并将xhr断点放掉；\n\n\n\n\n此时观察s，它里面会有拦截器，进入内部看，可以看出是经过混淆的；\n\n\n\n\n我们需要的是请求拦截器，所以我们就需要看当前是否是我们需要的位置；\n\n\n\n\n很明显这就是请求拦截器，也可以去其他几个方法看看，因为它有时候不止一个拦截器，我们就不去看了，把外面的断点放掉，然后进入这个断点；\n\n\n\n\n可以看到此时我们的参数还是明文，那我们就需要点击跳出函数来看它在哪里变成的密文；\n\n\n\n\n点击跳出一次后参数任然是明文，所以继续跳出；\n\n\n\n\n此时作用域没有值了，我们再跳一次；\n\n\n\n\n再跳一次就可以发现我们的参数生成了，那我们就需要去前面找加密方法；\n\n\n\n\n那么有没有可能是明文消失的前一栈呢，很有可能，我们找拦截器的原因就是生成参数的位置大多都会在那里，既然明文消失的最后一次出现是在拦截器，那我们理应去那里找，再次触发请求；\n\n\n\n\n来到上一个位置就可以发现参数就是在这里加的密，那我们依次在控制台还原里面的混淆；\n\n\n\n\n将改写后的代码都拿下来，\n\n\n\n\n这即是我们的加密方法，那么此时我们需要做的是就是找到这三个方法是吧，首先去找这个encode方法，点击进去；\n\n\n\n\n进入一个虚拟文件，那么我们的方法就是这个policy，将它拿下来，注意此时不要拿return，只拿方法；\n我们观察这个方法，传进去两个参数，将断点打进去，可以看到m是我们的参数，w不知道，那我们可以看到它说如果w不存在，就创建，那我们直接不传，让它生成就好了；\n但这里会报错创建方法不存在，那我们也需要进去看看；\n\n\n\n\n进入之后可以看到一个很熟悉的东西，webpack，那在这里我们的思路其实就是将它导出再调用；我们就需要去找到他所在的大方法里，也就是顶格的方法；\n在这里我的方法是将整段复制到pad++里，然后比较方便找，语言选择js，然后折叠所有层次；再搜索我们的方法；\n\n\n\n\n这样就比较好拿我们的方法，我们拿下来后进行改写；\n\n\n\n\n此时运行一下会报错commonjsGlobal，我们在控制台输出它，发现他就是一个window对象，那我们直接全改成window，然后再定义一个window对象；\n此时我们先注释掉其他的代码，只留下这个webpack看看能否运行，发现是没有报错的，那我们就可以导出函数了，在顶部顶一个zt变量，用来接受加载器；\n\n\n\n\n此时我们就可以试着打印一下zt，看看有没有接收到方法；\n\n\n\n\n可以看到成功的拿到了方法，所以create函数就可以改写为zt..Writer.create()了，此时直接打印一下看能否出值；\n\n\n\n\n可以看到出值了，那么后面两个方法应该就在上面的webpack里，当然这里还会有一个报错，会说参数类型错误，经过调试其实就是参数中的  “policyType”: ‘6’,这个6必须是字符串形式；\n和网页上进行对比看看是否是正确的；\n\n\n\n\n可以看到结果是一致的，那么参数逆向也就完成了；\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"人人贷逆向登录","url":"/2023/11/30/%E4%BA%BA%E4%BA%BA%E8%B4%B7%E9%80%86%E5%90%91%E7%99%BB%E5%BD%95/","content":"一、人人贷https://www.renrendai.com/login?returnUrl=%2F1.需要加密的参数：\n表单：j_password\n\n2.逆向过程：\n直接搜索，定位到四处，都打上断点，然后登录；\n\n\n\n\n直接进入加密方法看看，可以看到他只有一个方法，那大概率是不可能通过这一个方法就能加密吧；\n\n\n\n\n并且在尾部它导出了这个方法，那我们直接去找它那一个大方法，也就是自执行方法；将整个自执行拿下来；拿下来之后需要进行一些调整，这里是类似于webpack，我们需要导出我们需要的方法，直接在上方定义一个zt，在结尾进行导出，并在顶部function前面加上一个感叹号让它变成一个自执行函数，然后运行；\n\n\n\n\n在这里会报一个require的错，它是一个导入，意味着在网页源代码里有导入外部文件，这里我们需要去看看导入后的结果，并且直接使用结果来代替导入；\n\n\n\n\n通过搜索关键词，我们定位到了这里，可以看到这里有两个key，在后方下断点来看看它到底是用的哪一个；通过调试我们可以知道它用的是第一个，我们将它直接替换，再次运行报错navigator，那么就很明了了；\n补上之后再次运行即可；\n\n\n\n\n至此加密完成；\n\n","categories":["参数加密"],"tags":["登录逆向"]},{"title":"今日头条逆向","url":"/2023/12/01/%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1%E9%80%86%E5%90%91/","content":"一、今日头条https://www.toutiao.com/?wid=17014130373221.需要逆向的参数：\n表单参数：**_signature**\n\n2.逆向过程：\n直接搜索_signature关键字，可以定位到也就几个结果，我们可以看看有没有我们的加密位置，经过寻找我们可以找到几个加密位置，直接全部打上断点，但是我们需要明白应该在哪个位置打断点；\n\n\n\n\n在我们找到的位置，这里有两个关键字，第一个很明显不是，那么我们看第二个，它等于n，那么我们就去n的生成位置打断点，并且它也很符合加密逻辑；\n果然是可以断住的，经过调试可以发现这里就是我们的参数生成位置，但在这里需要注意的是，我们确定了它是加密位置，但在我们进行断点释放的时候，发现程序并没有走完，而是又来了一个接口，在这种情况下我们就需要确定哪一个是我们需要的接口；\n\n\n\n\n使用postman进行测试，发现这一个接口生成的参数才能正确的进行请求，那么这一个就是我们需要的接口；\n接下来我们就可以进入函数的内部看看具体做了什么，并在函数的返回位置打上断点；\n\n\n\n\n那么我们就可以来分析一下这段代码做了什么事情，还是在返回的地方打上断点；\n\n\n\n\n首先我们可以看到这是一个逗号表达式，那我么就可以看一下前半部分是什么输出，它的输出是undefined，在js里它的bool值就是false，那么很明显它执行的是逗号后面的代码，那我们就去看第二句；那其实也很明显，就类似于做了判断，看他们分别输出什么；\n\n\n\n\n在这里很明显可以看出它的输出值是false，那么就继续往后走，但在这里需要注意的是，即使它输出的是false，那它对于n的赋值，也是执行了的，void 0 &#x3D;&#x3D;&#x3D; n很明显也是false，null &#x3D;&#x3D;&#x3D; (r &#x3D; n.sign)也是false，那就继续往后走，后面是一个三元判断；\n\nvoid 0 === r ? void 0 : r.call(n, o)\n\n\n在这个表达式里，问好左边的内容如果是true，那么久执行：左边的内容，如果是false则反之；在这里肯定是false，因为在前面很明显进行了r的赋值，那它很明显不等于0，所以最终的加密方法就是r.call(n, o)；\n那么r现在可以进行分析，它等价于window.byted_acrawler.sign，这个方法，逐渐赋值；n就是我们的方法不用管，o就是我们的参数，所以最终加密方法：window.byted_acrawler.sign(o)；\n此时可以直接在控制台输出一下进行验证，然后进行测试；\n\n\n\n\n\n\n那么我们直接进入这个方法，在控制台输出之后可以直接进入；\n\n\n\n\n进入后可以发现这是一个jsvmp，所以我们大概率需要进行补环境操作，而且遇到这种很明显进入的地方无法执行加密并且整个文件的代码量也并不多时，直接将全部复制下来；\n拿下来后直接运行代码肯定会报错，而在第一行就进行了一个window的判断，而且它肯定不为空，所以我们直接补上window&#x3D;global;\n再次运行报错Cannot read properties of undefined (reading ‘referrer’)，那么这个就很明显是环境的问题了，在这里我们可以在报错的地方打上条件断点，然后进行判断，A &#x3D;&#x3D;&#x3D; ‘referrer’，断住后在控制台输出即可补上环境；\n\n\n\n\n运行后再次报错sign，这代表着我们拿下来的方法其实并没有在我们的程序里面，那么我们这里的解决方案就是：\n\n\n\n\n打印最后结尾的环境信息，可以看到具体是哪里出了问题，同时在浏览器控制台打印这一段，对比一下具体是哪一个方法除了问题，然后将它删掉；\n\n\n\n\n删掉之后和浏览器一致了，但在这里可以看到有cookie字段，我们很明显没有给它这个环境，而浏览器有，所以我们需要补上这个cookie；\n运行后报错href，同样的道理直接去调试，打上条件断点，在这里直接将location全部补上；\n再次运行报错useragent，同样去拿下来运行即可；\n\n\n\n\n至此参数加密完成；但在拿o值的时候，必须要记住是不是我们需要的那个数据包；\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"信融财富逆向登录","url":"/2023/11/30/%E4%BF%A1%E8%9E%8D%E8%B4%A2%E5%AF%8C%E9%80%86%E5%90%91%E7%99%BB%E5%BD%95/","content":"一、信融财富https://www.xinrong.com/2.0/login2.0.html1.需要逆向的参数：\n表单：password\n\n2.逆向过程：\n直接去跟栈，从哪里进其实都行，但我们是在登录，那么最好直接从login进入；\n\n\n\n\n进来之后我们可以观察，是否有我们的加密方法，那么这里比较明显；\n\n\n\n\n我们找到了加密方法，测试一下确实是加密位置，那看看它做了什么事情，也就是AA.Helper.encrypPw函数加密了我们的密码，那我们进去看看；\n\n\n\n\n将整个我们需要的函数拿下来，再来看看应该补什么，在这里我们需要补几个方法，去看它的位置在哪里，可以发现其实都是RSA什么，那么我们直接将整个RSA拿下来就可以了；\n\n\n\n\n至此加密完成；\n\n","categories":["参数加密"],"tags":["登录逆向"]},{"title":"企名片逆向","url":"/2023/11/29/%E4%BC%81%E5%90%8D%E7%89%87%E9%80%86%E5%90%91/","content":"一、企名片https://www.qimingpian.com/innovate1.需要逆向的参数：\n响应数据解密\n\n2.逆向过程：\n直接搜索decrypt，发现没有断住，那么我们可以搜索JSON.parse来定位，在这里可以很轻松的定位到具体的解密位置；\n\n\n\n\n可以看到这就是解密位置，我们看看它具体做了什么，首先是a.a.decode方法对我们的密文进行了处理，然后再是外部的o方法处理了一堆东西；那么我们现在就可以去扣具体的方法了，首先处理a.a.decode方法，进入内部，直接将它拿下来；\n然后去处理o方法，同样也是将它直接拿下来，之后运行报错f，那么我们去看看f是什么，将程序走到报错的位置，可以看到它并不是一个方法；\n\n\n\n\n并且它在上方其实就有声明，同时还有一个l，在后续其实是用到了它，也一同拿下来；再次运行即可完成解密；\n\n\n\n\n至此数据解密完成；\n\n","categories":["响应解密"],"tags":["web逆向"]},{"title":"前程无忧逆向","url":"/2023/12/03/%E5%89%8D%E7%A8%8B%E6%97%A0%E5%BF%A7%E9%80%86%E5%90%91/","content":"一、前程无忧https://we.51job.com/pc/search?keyword=java&amp;searchType=2&amp;sortType=0&amp;metro=1.需要逆向的参数：\n请求头：Sign、Uuid、\n表单：requestId\ncookie：acw_sc__v2(阿里系)、guid\n\n2.逆向过程：\n首先来分析sign，直接搜索的话会有一些类似的，我们打上断点之后分页，发现并不能断住，所以我们去下xhr断点；\n\n\n\n\n此时需要注意的是，下路径断点是哪些路径，问号前面的才是路径，后面的是参数；之后进行分页，断住后去观察；\n\n\n\n\n此时可以观察到它有一个异步回调栈，在这里我们可以去找他的拦截器，点击u.request栈，看看是什么情况；\n\n\n\n\n在跳转的地方打上断点，在这里我们去作用域观察d，它里面会包含我们的拦截器信息，在这里我们只需要看我们请求的拦截器是吧，里面会有方法，我们点进去看看；\n\n\n\n\n点进第一个拦截器就可以看到有类似加密的位置，我们直接打上断点，并进行分页，在进行分页的时候记得将前面的断点释放；\n\n\n\n\n在控制台输出一下，他就是我们的sign参数生成的地方，那我们就可以进行分析了；在页面可以看到它是Hmacsha256加密算法，那我们去验证一下他是否为标准加密；\n\n\n\n\n可以看到他就是一个标准的加密，那我们直接使用算法包即可；\n\n\n\n\n此时参数成功生成，但在里面的e是变化的，也就是时间戳和页码，所以我们直接将他们改动就可以了；\n至于uuid，在python就可以实现，且requestid是固定的，时间长了可能会有变化，随页面进行改变即可；\n\n\n\n\n接下来就去逆向cookie里的参数，在这里我们使用工具进行hook；\n\n\n\n\n随后进行分页，如果无法断住就在应用里将cookie清空再进行分页，此时可以断住，并且观察作用域，此时我们想要的参数已经生成，所以我们需要向前跟栈，找到加密的位置；\n\n\n\n\n此时向上跟栈，就可以看到这里有个参数名，并且后面就是arg3，那么这个arg3应该就是我们需要的参数值了；\n\n\n\n\n那么我们就可以去找到arg3de生成在哪里；\n\n\n\n\n我们可以看到在上方进行了定义，并且在后续我们没有看到arg3的生成位置，那么就可以确定它就是在这一部分生成的，接下来就可以开始去看看那些混淆分别是什么；\n\n\n\n\n在控制台输出或者直接将光标放在混淆代码上就可以看到原始值，将他们解开；\n将混淆解开后运行报错arg1 is not defined，那我们就去看看它在哪里，通过调试我们发现它是在另一个包里返回的，那么证明我们直接请求它就可以得到我们的arg1；\n\n\n\n\n并且经过测试可以发现它没有加密，连cookie不带都可以，所以先随机拿一个进行测试；即可成功输出我们的arg3参数；\n\n\n\n\n那么我们来对guid进行分析，直接搜索看看；\n\n\n\n\n可以看到它是set-cookie，这意味着它是服务器返回在进行设置，所以我们只需要对相应的包发起请求就可以得到guid；\n至此逆向全部完成；\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"吉林长春产权交易中心逆向","url":"/2023/11/28/%E5%90%89%E6%9E%97%E9%95%BF%E6%98%A5%E4%BA%A7%E6%9D%83%E9%80%86%E5%90%91/","content":"一、吉林长春产权交易中心http://www.ccprec.com/navCqzr/#/cqzr1.需要逆向的参数：\n请求载荷\n响应数据\n\n2.逆向过程：\n在这里我们直接选择下xhr断点，直接跟栈也是一样的逻辑；\n\n\n\n\n执行分页，断住后我们可以看到我们的参数已经是密文状态，那我们就去向下跟栈，我们跟栈的目的就是找到它在哪里从明文变成密文；\n\n\n\n\n经过调试可以看到此时明文参数是a，那我们就去找a的生成以及加密，那么很显然就找到了；那么此时就可以将xhr断点进行释放，去看看代码，a值就是o值进行了一个字符串的转变，那么o值是什么，我们可以看到o值里面是有一些参数，但我们不确定他们是不是固定的，我们去看看o的生成位置；\n\n\n\n\n可以看到o值一共有好几个数据，我们一个一个来看它的生成；\n\n\n\n\n在这里其实就可以看出，o是经过了两次赋值，第一次对一部分赋值，第二次对acts赋值，那么可以去找找具体参数的生成；\n第一个id是一个随机的值，并且args里的id也是这一个方法生成的；\n\n\n\n\nprojectKey是固定的值，经过调试clientKey也是固定的值；那么也就是那两个id是变化的；\n那么在这里，我们首先需要把o给生成，直接复制o的值，然后再进行修改；\n那么在上述分析中，只有那两个id是变化的，所以我们只需要去生成id即可，进入函数内部，直接将方法拿下来；拿下来之后运行报错e，那么我么去分析，可以看到它是一个数值，然后将它转成字符串，并且每进来一次他就会加1，其实就是记录我们调试的次数，那么我们直接给它一个数值就可以了；\n再次运行报错this.randomStr is not a function，那么我们去拿它对应的方法就可以了；后面是同样的逻辑，补完之后我们打印一下这两个id；\n\n\n\n\n可以看到我们是成功的生成了两个变化的参数；在这里拿方法的时候有一个需要注意的点，在拿下来的方法里调用的命令一般都是this.randomStr的形式，在这里我们最好是去掉this以便我们可以正常调用；\n那么现在我们得到了它的参数，就可以去对它进行加密了；进入我们的加密函数，去看看做了些什么；\n\n\n\n\n进入这个函数可以看到，他做了一个类似于判断，那这里我们可以打上断点进行调试；\n\n\n\n\n然后观察程序是怎么执行的，一步一步进行调试；\n\n\n\n\n可以看到它并未走中间的代码，那么我们直接扣其他的代码即可；很明显，当中还是有其他方法在的；直接去扣encryptCode方法；\n\n\n\n\n很明显里面同样有很多this.方法，将this去掉，并且将方法都补上，随后会报错.length，可以看到是pubPassNum的问题，那么我们同样去找到它；\n\n\n\n\n观察一下其他几个貌似也有用，都拿下来；可以发现setpass会报错，同样将它拿下来，此时注意调整代码的顺序，再执行代码，就可以生成我们的表单参数；\n\n\n\n\n此时我们利用程序测试一下是否可以成功请求；\n\n\n\n\n可以看到成功发起了请求，那么我们就可以进行响应数据的解密了；\n数据解密我们老方法，直接搜索关键字，decrypt(,发现没有，那么搜索另一个关键字JSON.parse(，有很多，但其实只要细心一点在分析参数的时候就已经发现它的解密方法了；\n\n\n\n\n所以解密方法就是decryptCode(e)这玩意，e就是我们的密文数据，直接扣它的方法就可以了，当然它需要的方法我们都已经扣过了，拿下来直接运行就可以了；\n\n\n\n\n与python进行交互，可以看到解密成功，page参数传给js，后生成参数再请求；\n至此逆向完成；\n\n","categories":["参数加密&响应解密"],"tags":["web逆向"]},{"title":"同花顺逆向","url":"/2023/11/29/%E5%90%8C%E8%8A%B1%E9%A1%BA%E9%80%86%E5%90%91/","content":"一、同花顺A股市场_同花顺行情中心_同花顺财经网 (10jqka.com.cn)1.需要逆向的值：\n在请求头可以找到cookie和Hexin-V两个值，但值相同，其实只需要破解一个；\n注意：本案例需要用到工具一键补环境；\n\n2.逆向过程：\n首先在这里我们有多种方法，但在这里我们选择hook的方法来hookv值，因为问财网其实跟它是一个道理；\n\n\n\n\nhook代码如上图，直接运行后进行分页；\n\n\n\n\n断住后向上跟栈，找到生成v值的位置；\n\n\n\n\n可以发现n就是我们的值，那么我们进入它的生成方法，可以发现他就是我们的O方法；而仔细看o方法其实也就是做了一些浏览器相关的检测，所以在后面我们就需要去补环境；\n\n\n\n\n在这里我们的需求就是将O函数导出，然后在外部进行调用；具体的方案就是在O函数下方使用一个变量接受它，然后在顶部声明它，最后就可以在外部进行调用了；\n运行后它会报错document，很明显这就是我们的浏览器环境，在这里我们使用jsdom来补环境，首先需要安装jsdom，指令为：\n\nnpm install jsdom\n\n\n然后就是一个框架，补上去即可；\n\nconst jsdom = require(&quot;jsdom&quot;);const &#123; JSDOM &#125; = jsdom;const dom = new JSDOM(&#x27;&lt;!doctype html&gt;&lt;p&gt;Test&lt;/p&gt;&#x27;)window = dom.windowdocument = window.documentnavigator= window.navigator\n\n\n补上之后运行即可，他会有报错，但不影响值的生成；\n\n\n\n\n至此参数逆向完成；\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"国家开放大学逆向登录","url":"/2023/11/30/%E5%9B%BD%E5%AE%B6%E5%BC%80%E6%94%BE%E5%A4%A7%E5%AD%A6%E9%80%86%E5%90%91/","content":"一、国家开放大学访问控制系统 (ouchn.cn)1.需要逆向的参数：\n\n\n大概可以看到会有4个参数需要逆向，但凡事先不要慌，不要着急去开始，我们可以看到下面两个参数，&#x3D;号结尾，很有可能是b64的编码，那么我们去看看他是不是；\n\n\n\n貌似他俩都是路径之类的，所以不需要逆向，那么真正需要逆向的值就是IDToken1，IDToken2；\n\n2.逆向过程：\n此时我们可以看到login是一个文档，没有办法去进行跟栈和其他操作，此时我们进行搜索，发现没有东西，需要点击返回登录，然后再次刷新；此时即可搜索到；\n但是我们可以发现，找到的地方均不像是加密的位置，那么我们这里也有其他的方式可以实现，一般这种document请求我们可以去元素面板去找它的输入框的id，因为他是唯一的嘛，所以可以尝试一下；在这里我们尝试搜索它的idpassword，搜索后我们来尝试定位；\n\n\n\n\n此时进行登录，发现是断住了，那么我们来看看具体是干了什么；\n\nvar loginName = $(&quot;#loginName&quot;).val();var password = $(&quot;#password&quot;).val();var validateCode = $(&#x27;#validateCode&#x27;).val();\n\n\n上述代码，其实就是根据id去取值，类似于选择器吧；\n\n\n\n\n可以看到就是我们输入的值；但经过分析，我们发现它仅仅只是做了取值，并没有做加密，那么我们还得继续下断点；\n\n\n\n\n很显然，这里就是执行了加密，后续的random同样是取了一个值，我们拿下来固定即可；然后将主体加密方法扣下来，再去找他的方法，strenc；\n进入函数内部，我们可以发现本身代码就并不多，那我们干脆将整个代码都拿下来，之后再次运行，就成功生成了我们的参数；\n\n\n\n\n用户名的话其实可以看到它是同一个加密方法，那么就无需再进行操作；至此参数加密完成；\n\n","categories":["参数加密"],"tags":["登录逆向"]},{"title":"壹钱包商城(m端)逆向","url":"/2023/12/13/%E5%A3%B9%E9%92%B1%E5%8C%85%E5%95%86%E5%9F%8E%E9%80%86%E5%90%91/","content":"一、壹钱包商城(m端)https://m.yqb.com/mall/1.需要逆向的参数：\n表单参数：sign、reqtranceno\n\n2.逆向思路：\n首先参数足够多，所以我们在这里直接搜索第二个关键字，首先就来处理它，搜索后就两个位置，直接都打上断点即可；\n\n\n\n\n那么这里的加密方法就是**(0, p.default)())**，当然在这里是可以进行改写的，其实也就是p.default()这个函数，并且它是没有传入参数的，所以大概就会是一个随机的方法，我们进入方法看看；\n\n\n\n\n那么很明显，对时间戳进行了一些随机，直接将方法拿下来；那么reqtranceno这个参数就已经生成成功了，我们再去看sign这个参数，直接同一个文件搜索sign，也不过两个位置，同样的逻辑，我们直接去看加密方法；\n\n\n\n\n同样的，是一种类似的方法，但在这里传入了参数，但其实都是固定的，注：时间戳默认为已知参数，那么就进去拿方法；\n\n\n\n\n进入后其实就可以发现，参数就是这个a，我们将参数和方法都拿下来；在这里我们就可以将a &#x3D; r[0] 这个语句删除，因为我们会在代码里固定，不需要它进行赋值；\n进行相应的改写后会报错o is not defined，这里我们就可以去扣代码了，我们就看看报错位置在哪里，直接进入方法内部；\n\n\n\n\n可以看到是一个加密方法的内部，并且是init，我们都知道这很像消息摘要算法，具体是哪一个我们不清楚，我们可以去观察数组；此时需要单步执行，并观察作用域何时出现数组；\n\n\n\n\n此时出现了数组，我们继续单步执行知道数组消失，此时我们可以看出其实是一个sha1加密；\n\n\n\n\n所以我们就可以去测试一下是否是标准的sha1，将它的参数拿下来进行测试；\n\n\n\n\n很明显它是标准的sha1加密，直接使用标准算法包即可；\n至此逆向结束，结果如下：\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"天翼云逆向登录","url":"/2023/12/13/%E5%A4%A9%E7%BF%BC%E4%BA%91%E9%80%86%E5%90%91%E7%99%BB%E5%BD%95/","content":"一、天翼云https://m.ctyun.cn/wap/main/auth/login?redirect=%2Fmy1.需要逆向的参数：\n\n\n一共四个参数，我们首先去看重要的参数，也就是password，同样可以去搜索关键字，但在这里我们也可以跟栈，而跟栈也是有技巧的，比如我们在这里是登录，那么我们甚至可以不用跟栈；\n\n\n\n\n\n很明显一堆有的没的里面夹杂着一个login，他不是谁是，点进去一眼就能够看到加密位置；\n\n\n\n\n在这里也可以通过跟栈的方式定位到加密位置，也是一样的结果，所以我们就可以去分析加密的参数和方法了；实际上我们可以发现后面的参数就是账号后面多了00000，固定即可；就可以去找里面的方法了，也就是w[“c”]方法，我们直接进入方法内部；\n\n\n\n\n其实这里面做了一堆事情啥也不是，可以去把它扣下来，我们直接去看他是不是标准加密，在这里需要取下来它的密钥；\n\n\n\n\n其实就是标准加密，我们直接自己改写，如下：\n\n//coding: utf-8//File:1.参数加密.js//Author:下雨天//Date:2023/12/13 20:46const CryptoJS = require(&quot;crypto-js&quot;);// user = &quot;17312345678@163.com00000&quot;var e = &#x27;123456&#x27;const secretKey = CryptoJS.enc.Hex.parse(&#x27;3137333132333435363738403136332e636f6d3030303030&#x27;)//此密钥和用户名相关，在这里仅做测试直接拿固定值const encrypted = CryptoJS.TripleDES.encrypt(e, secretKey, &#123;  mode: CryptoJS.mode.ECB,  padding: CryptoJS.pad.Pkcs7&#125;);const encryptedText = encodeURI(encrypted.toString());console.log(encryptedText);\n\n\n至此密码就已经逆向完成了；就可以去看那三个参数，其实在做这个案例的时候，我发现它们三个对方服务器根本不校验，但在这里只是为了逆向也就一起逆向出来，其实也很简单；\n直接搜索关键字，很显然这种只要不混淆那么搜索就是最好的方法，也只有一个文件，直接进去找加密位置；\n\n\n\n\n首先看n也就是时间戳这个参数，主要就是看后面减去的那个东西，它输出是26，但不确定他是不是固定的，所以我们进入函数内部看看；\n\n\n\n\n这里是一个或运算，并且其实两个结果都是26，但第一部分是关于环境的，我们直接固定使用即可；那么n参数就解决了，t是一个固定的，关于它们三个的生成可以观察到都是和rtn这三个值有关的，所以我们再去看r这个参数；\n进入它的方法内部，其实可以看出来是一个随机值，直接将方法拿下来就可以了，或者直接固定一个值就可以，因为随机的都行，那么证明所有都行；\n至此三个参数相关的值都已经拿到了，接下来就是找到它们的加密方法，那么也就是这个i方法，直接进去，就可以猜到他就是一个md5算法，至于标不标准测试一下就知道了；\n\n\n\n\n很明显，标准加密；那a的值也就是做了两次md5；至此所有参数完成；\n\n","categories":["参数加密"],"tags":["登录逆向"]},{"title":"幻藏逆向","url":"/2023/11/29/%E5%B9%BB%E8%97%8F%E9%80%86%E5%90%91/","content":"一、幻藏发售日历 - 幻藏艺术平台 (huancang.art)1.需要逆向的参数：\n请求头：\n-Signature\n-x-token\n\n\n2.逆向过程：\n通过关键字搜索，可以定位到，打上断点进行分页；\n\n\n\n\n两个参数均在这里，控制台打印后释放，发现这里就是真正的加密位置；\n首先我们来分析x-token，他是J方法来处理了e，进入J方法；\n\n\n\n\n可以看到她告诉了我们是md5加密，有时候他会是一个init方法，那么也可以逐步往下走也可以看到；\n返回原始位置来分析具体做了些什么事；\n\n\n\n\n可以看到，在最开始e是我们的参数，在后续进行了两次处理，在上方e值进行的首次处理；\n\n\n\n\n此时将这个方法扣下来，在此它处理的参数是我们的A.data，它是一些参数，我们复制下来；下方还有一个a.url我们也拿下来；\n此时打印一下e值，报错ci，那我们去看看它是什么，将它拿下来再运行即可；此时我们的e就成功生成了；\n\n\n\n\n在上面我们也知道了他就是一个md5加密算法，那直接写一个算法再使用就可以了；\n\nconst CryptoJS = require(&#x27;crypto&#x27;)function md5(text)&#123;    return CryptoJS.createHash(&#x27;md5&#x27;).update(text).digest(&#x27;hex&#x27;)&#125;\n\n\n使用这个md5去加密我们的e值，即可得到结果；\n\n\n\n\n在此解决了一个参数，那么我们再去看看另一个参数具体是在哪里生成的；\n\n\n\n\n我们很容易就可以看到，他其实就是加密了两次J方法将那一串字符串，而我们在上面的分析得知了它是md5加密，那么也就很简单了；其实可以看出来它就是固定的，直接拿下来就能使用；\n\n\n\n\n至此参数加密完成；\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"建设库逆向","url":"/2023/11/28/%E5%BB%BA%E8%AE%BE%E5%BA%93%E9%80%86%E5%90%91/","content":"一、建设库建筑施工企业资质查询_建筑企业经营范围_成立时间_人员查询_第4页_建设库 (jiansheku.com)1.需要逆向的参数：\n请求头sign参数；\n\n2.逆向过程：\n首先通过搜索关键字，发现实现是太多，所以我们使用路径+sign的方法来进行搜索，发现也没有得到我们想要的结果，所以我们使用xhr路径断点来分析，发现也没有办法找到相应的参数，那我们此时只能来看它的启动器了；\n\n\n\n\n图中的t.exports是webpack，在request里会有他相应的拦截器，我们通过它进去；\n\n\n\n\n断点停留，在作用域可以看到v里会有一些函数，就是它的启动器，因为它是异步回调了v里的方法，第一个是error相关的所以我们不需要观察它，进入第二个函数，我们能看到如下：\n\n\n\n\ninterceptors即是它的拦截器，将上一个断点放掉，在请求拦截器打上断点，同时释放程序，观察作用域；\n观察可以看出，此时我们的参数并没有生成，那么我们单步执行进入这个函数；\n\n\n\n\n进入后其实就很清晰了，这里大概就是我们需要找的加密位置；经过调试，大概也就找到了它的具体加密方法；\n\n\n\n\n此时就可以将它扣下来；扣下来之后我们首先将基本的参数补齐，time就是在上方的时间戳，e.data我们在控制台输出发现是我们的请求参数，那么直接复制下来；\n复制之后观察代码，去网页把eu方法拿下来，运行后报错，同样去拿下来，将eu，nu，tu方法补齐后再次运行报错Jc；将Jc拿下来之后，报错Zc，我们去看看他是怎样构成；\n\n\n\n\n此时我们可以看到zc的生成似乎没办法拿下来，那我们打上断点让程序走过来，点击下方的zc进入函数，进入后我们发现它停留的位置貌似不怎么对，这是webpack的原因，所以此时我们执行单步执行看看；\n\n\n\n\n\n\n测试一下，其实就是一个md5加密；那么我们直接导包来进行替换；\n\n\n\n此时我们打印一下，发现成功执行；\n\n\n\n\n至此参数成功生成；\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"开鑫金服逆向登录","url":"/2023/11/30/%E5%BC%80%E9%91%AB%E9%87%91%E6%9C%8D%E9%80%86%E5%90%91%E7%99%BB%E5%BD%95/","content":"一、开鑫金服https://www.gkkxd.com/user/login1.需要逆向的参数：\n表单：password\n\n2.逆向过程：\n搜索password进行定位，观察后成功断住；\n\n\n\n\n$(“#dlmy”).val()，我们可以看到这种形式，很显然，他是在取值，后面那个也是，将它拿下来即可，但需要注意的是，它有可能不同的请求会变化，但在某一个包里是绝对可以找到它的；\n拿下来之后就可以着手找加密方法了，进入函数内部；\n\n\n\n\n进来之后我们可以看到里面是又嵌套了一个方法，我们进去看看，发现它在同一页面跳转，直接整个文件全都复制下来运行即可；\n\n\n\n\n至此加密完成；\n\n","categories":["参数加密"],"tags":["登录逆向"]},{"title":"掌上高考逆向","url":"/2023/11/28/%E6%8E%8C%E4%B8%8A%E9%AB%98%E8%80%83%E9%80%86%E5%90%91/","content":"一、掌上高考全国大学名单|排名排行榜|掌上高考 (gaokao.cn)1.需要逆向的值：\n表单参数：signsafe；\n\n2.逆向过程：\n收首先直接搜索关键字，再进行调试；\n\n\n\n\n此时可以定位到l，经过调试l即是我们的加密参数；\n具体就是v来处理了后面的内容，将主体方法拿下来。再进行相应的分析；\n将f值拿下来，在页面中他是写死的；此时就需要去找到j的生成；\n\nj = p(d)\n\n\n在上方我们发现了生成位置，但是在控制台输出后发现他输出的结果是未定义，那么其实它并不是在这里生成的；\n但其实观察一下就可以发现j值其实就是我们的路径和参数，在此其实可以直接拿下来；\n进入主体加密v的内部；\n\n\n\n\n将它拿下来，运行程序，报错d没有被定义，那么我们再去具体观察；\n有时我们会发现直接释放程序进不去我们的下一个断点，此时可以打上断点然后进行刷新，也可以走到v方法处再单步执行进入其内部，再进行释放即可正常释放；\nv方法对t进行了处理，观察其是一个内置方法，那么我们不用再去管他，直接将断点打在hmac处，在控制台输出d.a看看它是否是标准的加密；\n\n\n\n\n可以看出，他是标准的加密算法；那么直接导入算法包；再将d.a进行替换；\n再次运行报错f，那么可以猜测它就是标准加密；\n\n\n\n\n可以看到f()是一个md5加密，经过测试也可以发现是标准的加密；\n\n那么直接将其替换成CryptoJS.MD5(n)即可；再次运行即可实现加密；\n\n\n\n\n\n至此加密成功；\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"扇贝单词逆向","url":"/2023/12/24/%E6%89%87%E8%B4%9D%E5%8D%95%E8%AF%8D/","content":"一、扇贝单词https://web.shanbay.com/wordsweb/#/words-table1.需要逆向的参数：\n响应解密\n\n2.逆向思路：\n搜索decrypt没有办法定位，所以我们换一个关键词，搜索JSON.parse(也可以进行定位，经过调试可以找到解密位置；\n\n\n\n\n直接进入函数内部;\n\n\n\n\n在下方可以看到有导出，其实这就是一个webpack，所以我们想要调用这个方法就需要去扣这个webpack，我们就需要将整个方法都拿下来；\n\n\n\n\n可以看到这个方法是在html里的，所以扣的时候需要仔细，然后将它改成自执行的形式；\n\n\n\n\n然后我们在顶部定义一个变量为zt，这是为了在外部调用我们需要的d方法，首先需要导出加载器，在加载器后方进行导出；\n\n\n\n\n此时我们打印一下zt，看看其中有没有我们的方法；\n\n\n\n\n可以看到成功的导出了，那么就可以去找我们的d方法在哪一个模块里；\n\n\n\n\n可以看到在第四个，但是在这里的下标应该是3，那么很明显就是c里面的3，那么调用d方法的写法如下：\n\n\n\n\n至此就实现了内部方法外部调用；\n\n","categories":["响应解密"],"tags":["web逆向"]},{"title":"新东方培训班逆向","url":"/2023/11/29/%E6%96%B0%E4%B8%9C%E6%96%B9%E9%80%86%E5%90%91/","content":"一、新东方培训班新东方培训班_新东方辅导课程 - 新东方搜课平台 (xdf.cn)1.需要逆向的值：\n请求头Sign签名；\n\n2.逆向过程：\n在此案例，很显然，可以通过关键词来搜索，但不用看这个词就很多，所以直接搜索路径再进行关键字搜索；\n搜索后进行定位，成功断住，断住后往下走一步，查看返回的sign是否是我们需要的值，运行后将其放掉，再去查看新发的包，可以看到这就是我们需要的东西；\n\n\n\n\n那么Re就是我们的主体加密；进入其内部查看；\n\n\n\n\n通过这里其实我们就可以发现，它进行了四次填充，所以他其实是md5加密；\n所以我们直接将拼接后的数据取下来，再进行加密即可；\n\n\n\n\n整体代码如下：\n\nconst CryptJS = require(&#x27;crypto-js&#x27;)md5_des = CryptJS.MD5(&#x27;appId=5053&amp;cityCode=500100&amp;t=1700145342864&amp;pageIndex=4&amp;pageSize=12&amp;categoryCode=54&amp;order=0750F82C2-D8F6-49F6-878C-1E7EBEBC8DA2&#x27;).toString();console.log(md5_des);\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"新疆维吾尔族医保局逆向","url":"/2023/12/24/%E6%96%B0%E7%96%86%E7%BB%B4%E5%90%BE%E5%B0%94%E6%97%8F%E5%8C%BB%E4%BF%9D%E5%B1%80/","content":"一、新疆维吾尔族医保局新疆维吾尔自治区医疗保障局 (xinjiang.gov.cn)1.需要逆向的参数：\n表单参数：username、password\n\n2.逆向思路：\n直接搜索关键词，结合我们的路径，很容易定位到加密位置；\n\n\n\n\n打上断点，两个参数是同一个加密，所以只需要做一个参数的逆向即可；\n\n\n\n\n可以看到其实就是一个字符串加上一个数字。这个数字其实是固定的，所以我们只需要去拿他的方法就可以了；\n\n\n\n\n他其实已经说了是sm4加密算法，我们将它拿下来，此时运行会报错SM4Util，那我们同样进去看看；\n\n\n\n\n一共就三个函数，全部拿下来就行，再次运行报错base64js，同样去看看；\n\n\n\n\n进来后看到是一个s函数，那将他也拿下来就可以了，但拿下来之前可以提前看看有没有涉及其他函数，很明显里面有一个h函数，将它一起拿下来，运行后报错n；\n还是去看它具体是什么；\n\n\n\n\n这里的n是一个数组，直接拿下来就可以了；\n\n\n\n\n可以看到出值了，并且和网站上的一致，那么password也就是对时间戳做了同样的加密，是一个道理，至此逆向完成；\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"极志愿逆向","url":"/2023/12/05/%E6%9E%81%E5%BF%97%E6%84%BF%E9%80%86%E5%90%91/","content":"一、极志愿https://www.jizhy.com/44/rank/school1.需要逆向的参数：\n表单参数：\n\n\n\n2.逆向过程：\n首先分析参数，在这里需要逆向的很明显就是sign，ts是时间戳，在这里我们不清楚它是哪种时间戳，但在js代码里肯定会有生成的语句，只需要使用它的即可；\n在这里搜索后发现实在是有点多，并且跟栈也不太好跟，所以可以结合路径+关键字来定位，搜索路径之后有一个js文件，我们点进去之后再搜索sign进行定位，就可以找到加密的位置；\n\n\n\n\n在这里可以看到app_id和ts，那么它大概率就是加密位置，打上断点进行加载更多；\n\n\n\n\n可以看到加密的参数就是我们的表单参数，Xt就是我们的加密方法，那么我们就可以进去方法内部看看具体是做了什么；\n\n\n\n\n可以看到xt方法里面还嵌套了一个vt方法，所以在这里我们也要将它拿下来，去找它在哪里；\n\n\n\n\n很明显里面又嵌套了好几个方法，所以我们也要将他们拿下来，所以在这里我们可以一次性拿到大部分，后续运行缺什么方法就补什么方法；\n\n\n\n\n最后是需要这一些方法，运行即可得到我们想要的参数；\n但是在逆向过程中，我们可以发现我们的参数中有app_id,key这两个参数，我们其实不太确定它们是否是固定的，所以我们去进行寻找；\n\n\n\n\n搜索一下就可以看到它们两个都是固定的，直接用即可，至此参数加密完成；\n但在这里我们有个想法，在扣代码的过程中，会有一些比较熟悉的东西；\n\n\n\n\n其实很明显它是md5加密的分组运算，所以它有可能是一个md5加密，我们可以进行验证；\n\n\n\n\n其实我们扣了半天的代码，他就是一个标准的md5加密，为何有些代码能优化，就是这个道理；\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"智通财经逆向","url":"/2023/12/24/%E6%99%BA%E9%80%9A%E8%B4%A2%E7%BB%8F%E9%80%86%E5%90%91/","content":"一、智通财经https://www.zhitongcaijing.com/immediately.html1.需要逆向的参数：\n表单参数：token\n\n2.逆向思路：\n在此网站中有两种刷新方式，一种实时刷新，一种下滑刷新，在这里我们只看下滑刷新的情况；\n首先直接搜索token看能不能找到加密位置，也是很容易找到；\n\n\n\n\n此时需要注意，网页隔一段时间会自动刷新，需要辨认，此时的请求带有gt，证明它是自动刷新的，并不是我们需要的接口，所以我们需要手动下滑；\n下滑后成功断住，我们就可以来分析代码了，我们需要看此时的参数；\n\n\n\n\n此时我们就需要进行分析了，v方法到底做了什么事情，进入内部看看加密结果；\n\n\n\n\n可以看到传进去了t，又返回了t，所以啥也没干；\n\n\n\n\n结果来看也没有任何区别，那我们就可以进行简写了；\n\n\n\n\n那么加密方法就是前面这部分，我们进入看看；\n\n\n\n\n可以看到是一个R方法，直接拿下来，进行改写后运行，报错p[“a”]，那么我们又去看它是什么加密；\n进入内部后我们可以看到为sha1加密算法，进行验证看是否是标准的加密；\n\n\n\n\n很明显就能看到它是标准加密，所以直接导入标准算法包即可；\n\n\n\n\n替换后运行即可得到结果， 与页面用同一个时间戳进行对比；\n\n\n\n\n结果一致，那这个参数就完成了，还需要解决time那么时间戳，进行分析后发现上一次请求的最后一条数据的时间戳即是我们需要的历史shu’ju\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"毛毛租逆向","url":"/2023/11/29/%E6%AF%9B%E6%AF%9B%E7%A7%9F%E9%80%86%E5%90%91/","content":"一、毛毛租【毛毛租_上海办公室出租_上海写字楼出租|办公楼租售信息平台】_上海毛毛租 (maomaozu.com)1.需要逆向的参数：\n表单：整体加密\n响应数据解密\n\n2.逆向过程：\n首先看表单加密，直接去跟栈看看；\n\n\n\n\n在这里这种特征其实就大概率是webpack，但不是每一次都要扣代码，这种情况可以直接点击r,request这个栈去跟，进入之后可以发现一个现象；\n\n\n\n\n无论如何跟栈他都是定位到这个位置，但是可以看到下方有一个源文件，这是一种反爬，在这里我们去使用关键字搜索法来看看能否进行定位；搜索encrypt(，可以发现有几处AES，我们打上断点之后分页；\n\n\n\n\n可以看到执行过后就是我们的加密参数，此时a就是我们的表单参数，那么去看看加密方法具体是做了什么，\n\n\n\n\n可以看到加密方法对e进行了处理，首先是this.k方法加密了一个0，然后this.e方法加密了e和上一个加密过后的0；\n\n\n\n\n可以看到e方法和k方法一个是md5一个是aes加密，那么直接将他们拿下来然后导包就可以了；\n\n\n\n\n将相应的参数补全后运行即可；\n参数加密完成后来对响应数据进行解密；在上方我们知道了加密方法是AES，那么其实数据解密大概也是一样的，在这里我们直接搜索decrypt(关键字，也是很快就可以定位到数据解密的位置；\n\n\n\n\n其实是同样的逻辑，我们可以看到在解密的时候传了一个a值，但他是对0做的处理，其实他是固定的，所以我们直接取上方的代码即可，进行导包替换即可完成解密；\n\n\n\n\n至此逆向完成；\n\n","categories":["参数加密&响应解密"],"tags":["web逆向"]},{"title":"烯牛数据逆向","url":"/2023/11/29/%E7%83%AF%E7%89%9B%E6%95%B0%E6%8D%AE%E9%80%86%E5%90%91/","content":"一、烯牛数据最新赛道 · 烯牛数据 (xiniudata.com)1.需要逆向的值：\n表单有payload、sig两个加密的参数；\n返回的数据是密文；\n\n2.响应解密：\n首先进行分析，它的首页面其实是静态的，当你进行下滑或者切换页面时变成了动态页面，在此第一步我们先进行响应的解密；\n在此，我们使用JSON.parse(方法进行搜索，此方法与decrypt(均为关键字搜索法，搜索之后结果有些多，此时我们有两个解决方案：\n\n\n 从启动器进入，进入之后再进行搜索；\n 直接搜索路径，进入后再搜索关键字；\n\n\n注意：在搜索此方法时，有注意事项，如果括号里是内置的方法，那他很显然不带有解密的作用；\n此时有两个js文件都包含，我们经过调试，发现具体的位置在第二个js文件中；\n\n\n\n\n在控制台进行输出，发现就是我们需要的明文数据；将主体方法扣下来；经过调试，L是我们的密文数据，所以将它也拿下来；\n拿下来之后运行报错为Object(c.a)，选中整体进入函数内部，将方法的d1扣下来，随后的报错是一个道理；\n再次运行后报错_keyStr，进入具体的报错位置去调试，看看它怎么回事，在报错处打上断点调试，发现其是固定的值，将其拿下来；并且其实我们可以找到固定位置，__p其实也是固定的，在下方我们会用到；\n\n\n\n\n之后报错_p，同样的逻辑，不过此时必须先将上一步的断点释放，才能在__p处断住，发现也是一个具体的值，再次将其拿下；\n此时报错_u_d，很简单，再次去将方法拿下来；\n再次运行，数据成功解密；\n\n\n\n3.参数加密：\n一般来说，参数加密的关键词可以直接搜索，但比较普遍的不建议直接搜，同样可以搜索路径来定位，而在此经过调试也并没有那么好找，那么此时我们通过启动器进入再进行搜索；\n\n\n\n\n经过调试得知，p就是我们需要的sig值，那么将主体加密方法扣下来进行后续处理；\n将相应的值扣下来之后根据报错来补充，与数据解密的逻辑是相同的；\n将sig方法不上去之后，报错md5；\n\n\n\n\n乍一看好像是md5加密，但我们不是很确定，所以要具体看看；为何他不是标准算法，因为它是一个函数；\n但是进去调试之后，它似乎还是一个md5加密，在此我们进行验证，发现就是md5加密；具体是md5的大写加密；\n那么我们同样通过导包来实现：\n\nconst CryptoJS = require(&#x27;crypto&#x27;)function md5(text)&#123;    return CryptoJS.createHash(&#x27;md5&#x27;).update(text).digest(&#x27;hex&#x27;)&#125;\n\n\n运行，参数加密成功；\n\n\n\n\n如果观察仔细可以发现payload参数也不是一直不变的，但在上述代码其实已经生成了它，就是我们的f，打印它即可；\n\n","categories":["参数加密&响应解密"],"tags":["web逆向"]},{"title":"爱拍逆向登录","url":"/2023/11/29/%E7%88%B1%E6%8B%8D%E9%80%86%E5%90%91%E7%99%BB%E5%BD%95/","content":"一、爱拍爱拍网 - 一站式视频创作软件丨超清录屏软件 (aipai.com)1.需要逆向的参数：\n表单参数：password，user\n\n2.逆向过程：\n首先直接搜索password，内容太多，加个：再搜索，进行断点定位；\n\n\n\n\n成功定位到加密位置，那我们来进行加密的逻辑分析，其实这个没什么好说的，进入函数内部看看，单步执行进入，发现传的是一个l，这个l就是我们的密码，那么直接将整个函数拿下来就行了；\n\n\n\n\nuser的话其实也在同一位置，我们分析看看；\n\n\n\n\n可以看到这五行就是我们的加密逻辑，将具体的参数都拿下来，然后进行分析，此时重点肯定就是JSEncrypt()这个函数，我们进去看看，又是一个webpack，我们直接将整个代码拿下来；\n\n运行发现报错，我们去看看我们使用的方法，是t(t);\n\n此时报错是因为没有导出加载器，我们导出一下，再进行替换，参数就成功解密；\n\n\n\n\n\n至此参数加密完成；\n\n","categories":["参数加密"],"tags":["登录逆向"]},{"title":"猫眼电影实时票房逆向","url":"/2023/12/13/%E7%8C%AB%E7%9C%BC%E7%A5%A8%E6%88%BF%E9%80%86%E5%90%91/","content":"一、猫眼电影实时票房https://piaofang.maoyan.com/dashboard1.需要逆向的参数：\n表单参数：\n\n\n\n2.逆向过程：\n首先分析，uuid在python就可以实现，所以没有必要逆向，时间戳肯定会变，其次index是变的，signkey也是变化的，所以我们首先来看signkey这个参数，直接搜索看看，只有一个文件，进去打断点就可以了；\n\n\n\n\n打上断点程序自己会断住，因为它是实时更新的，所以我们就可以来进行分析了，在这里可以看到我们的参数等于f，所以就可以去找f的生成位置；\n在这里我们分析一下，**c[i(269)]**这种形式，里面的东西大概率会是一个字符串，我们可以输出看看；\n\n\n\n可以看到，他就是一个replace，在这里我们可以将后半部分进行输出，同时也可以看到是对c做了处理，我们对比一下它们会有什么不同；\n\n\n\n\n可以看到，它们是一模一样的，所以这段代码就可以简化成一个c，那么整个加密就是：\n\n\n\n\n那么我们就可以去看看这个方法了，进去就可以看到一个关键字，就是md5，那么我们就去看看是不是标准加密；\n\n\n\n\n经过测试其实它就是标准加密，所以这个参数我们就很容易就能生成；\n然后就是index，其实他就是一个随机数，那么我们将代码拿下来就可以了；最终的代码如下：\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"福建公共交易平台逆向","url":"/2023/11/30/%E7%A6%8F%E5%BB%BA%E5%85%AC%E5%85%B1%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%E9%80%86%E5%90%91/","content":"一、福建公共交易平台https://ggzyfw.fj.gov.cn/business/list/1.需要逆向的参数：\n请求头：portal-sign\n\n响应数据\n\n\n2.逆向过程：\n直接搜索关键字，打上断点；\n\n\n\n\n可以看到e就是我们的明文数据，那么我们直接去看它的加密方法；\n\n\n\n\n在这里直接将它扣下来，然后我们再去补缺失的方法，在这里可以看到有r[“a”]和 l(t)两个需要处理，前者其实就是一个固定的值，直接拿下来就可以了，后者是一个方法，我们直接去扣它就可以了；在前面没有提到的明文参数也需要拿下来，并且参数里有一个时间戳，在上方有他的定义，也一同扣下来，将具体的东西都补上后运行会报错u，那么我们进去看看它是什么方法；\n\n\n\n\n可以看到它是一个md5，我们不确定它是不是标准加密，所以我们去测试一下；\n\n\n\n\n\n\n可以看到他就是一个标准加密，那么我们直接就可以套用标准加密的库；\n\nconst CryptoJS = require(&#x27;crypto&#x27;)function md5(text)&#123;    return CryptoJS.createHash(&#x27;md5&#x27;).update(text).digest(&#x27;hex&#x27;)&#125;\n\n\n\n\n参数加密完成，接下来分析响应数据解密；\n直接搜索关键字，即可定位；\n\n\n\n\n可以看到，解密就是一个标准的AES，直接套用标准库即可；将相应的参数都拿下来运行即可解密；\n\n\n\n\n至此逆向完成；\n\n","categories":["参数加密&响应解密"],"tags":["web逆向"]},{"title":"看准网逆向","url":"/2023/11/29/%E7%9C%8B%E5%87%86%E7%BD%91%E9%80%86%E5%90%91/","content":"一、看准网【全国公司排行|排名榜单|哪家好】-看准网 (kanzhun.com)1.首先经过分析可以得知：\n表单的参数加密：\n\n​\t\t-b\n​\t\t-kiv\n\n返回的响应也是加密的；\n\n2.逆向过程：2.1 参数加密：\n首先我们利用搜索法，直接搜索kiv：关键词，定位到只有一个js文件，所以直接进入打断点，而后顺利断住；\n\n\n\n\n注意此时断点的位置，当你直接打在kiv旁边你会发现它无法精准打在你想要的位置，所以此时我们可以打在它的上方；\n\n在此调试发现b和kiv就在这里，那么我们看看它们分别是怎样生成的，在上方t就是b的生成，通过M.ma函数生成，那么我们点进去看看具体做了什么，\n\n\n\n\n\n可以发现就是一个h函数，在处理时传入了两个参数，e就是我们的分页参数，那么我们看看t值；通过调试发现t值是变化的，但其实我们要的是t里面的iv；\n那么此时我们就可以先看看iv值到底是怎样来的，其实我们通过分析可以看出，它的生成就在于这个M._A方法里；我们进去看看；\n\n\n\n\n进去具体的函数看看，并打上断点，可以看到它接受了一个16，并且他是做了一个随机的处理；\n\n\n\n\n可以将这个函数进行测试，将它整体拿下来，传一个16给它，可以发现每次都是一个随机值，那么这个iv我们就搞定了；\n此时将M.ma函数拿下来，他要传e和t，将他们分别拿下来，在前面我们已经知道，t里的iv值是随机的，那么刚刚我们已经成功生成了它，将它传入即可；\n运行后报错L，那我们去看看它是什么，将它拿下来，再次运行报错u，同样的道理；但是此时需要细致，再次运行报错o；\n那么很明显这个o，直接导包就行了；在最开始我们就可以看到，这个kiv其实就是等于iv，至此我们的参数加密就完成了；\n在我们导包后，确实生成了参数，但是我们发现b这个参数并没有随机而是固定的，那么很明显这是不对的，我们看看具体是哪里的问题；\n在进行调试后，其实我们b方法的主体生成并没有完全扣下来；\n\n\n\n\n将主体方法拿下来后进行相应的补全，就可以与python进行交互了；\n将生成的参数与python进行交互；\n\n\n\n\n通过我们模拟的参数发起请求可以看到正常返回数据，那么下一步我们就可以对它的响应来进行分析了；\n\n2.2 响应解密：\n数据解密还是搜索decrypt(,断点打上，断住之后检查一下，定位到具体位置；\n\n\n\n\n此时看看e值是什么，发现是一大串，那么很明显这就是我们要找的地方，当然，我们发现它还传入了一个t值，其实他就是上述分析的kiv，那么这个就很简单了，将整个方法扣下来，该替换就替换；\n\n\n\n\n至此所有逆向就完成了；\n\n","categories":["参数加密&响应解密"],"tags":["web逆向"]},{"title":"真气网逆向","url":"/2023/12/25/%E7%9C%9F%E6%B0%94%E7%BD%91/","content":"一、真气网https://www.zq12369.com/environment.php?order=DESC&amp;tab=rank1.需要逆向的参数：\n表单参数，响应解密；\n\n2.逆向思路：\n直接点开xhr请求，刷新页面，在这里我们可以看到响应是加密的，所以在这里我们还是先解决响应解密；\n还是搜索关键词看看能否找到解密位置，有几个结果，我们进去看像解密的位置给它打上断点，然后进行页面刷新，发现可以断住；\n\n\n\n\n可以看到这里断住了，但很奇怪的是，执行后的结果依然是密文，如下图：\n\n\n\n\n那就很奇怪了，但仔细观察也会发现虽然还是密文，但是却发生了改变，那我们就要看看具体的原理；\n观察代码，可以看到是一个switch case，那么我们就在三个case处都打上断点，然后一步一步执行程序，看看它的流程；\n\n\n\n\n刷新后可以看到首先是来到了3，释放之后又走了2；\n\n\n\n\n继续释放，发现在2处进行了多次处理，然后又回到了3，此时发现变成了明文；\n\n\n\n\n那么就很明显，经过了多次解密才得到了我们的明文，那我们将他的代码拿下来进行改写即可；同样将密文数据也拿下来，此时建议去数据包拿，避免拿到的数据是经过处理的；\n此时运行会报错akb33，我们去看看它是什么，发现它是一个字符串，经过多次测试它是固定的，直接在代码定义即可；\n再次运行报错Base64，那我们去将它拿下来，然后报错DES，一样的逻辑，拿下来即可；然后会报错md5，我们测试一下其实就是标准的，当然也可以去扣它的方法，也是一样的，然后报错akb36，我们可以去看看，它是密钥之类的，可能是固定的，我们尝试找一下；\n\n\n\n\n可以看到我们需要的三个参数都是固定的，而这里还多了一个，那么很可能加密参数的时候会用到它，我们将它们拿下来；\n于是我们就得到了解密之后的结果；\n\n\n\n\n但是我们可以发现中间好像有unicode编码，它好像是不影响的，但在这里我们也可以将它转成中文；使用的方法如下：\n\n\n\n\n那么就可以去分析参数加密的过程了，其实在解密的过程就已经可以发现一些线索了，既然解密时des.decrypt方法，那么加密会不会也在同一个文件，我们通过这个线索就可以去找一找；\n\n\n\n\n大胆猜一下，它就是加密方法的位置，我们测试一下；\n\n\n\n\n往上追朔一下，其实就是这里调用了那个方法，那么就将基础的东西都拿下来，此时很明显缺的应该是md5这个方法吧，以及里面的ObjectSort方法，第一个不用说了，标准md5，将ObjectSort方法拿下来就只剩MyEncode这个方法了，同样直接拿下来；\n缺什么补什么，然后直接运行即可，就可以得到一个参数，我们需要与网页对比来证明我们的方法没有问题，在这里肯定是时间戳的变化导致参数的变化，我们与网页共用一个时间戳然后看看结果，是一致的，那么参数加密也就完成了；\n\n\n\n\n至此逆向就完成了；\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"空气质量在线检测分析平台逆向","url":"/2023/12/24/%E7%A9%BA%E6%B0%94%E8%B4%A8%E9%87%8F%E5%9C%A8%E7%BA%BF%E6%A3%80%E6%B5%8B%E5%88%86%E6%9E%90%E5%B9%B3%E5%8F%B0/","content":"一、空气质量在线检测分析平台https://www.aqistudy.cn/1.需要逆向的参数：\n表单参数、响应解密；\n\n2.逆向思路：\n首先我们会遇到第一关；\n\n\n\n\n我们利用其他方式打开开发者工具；也会有其他的错误；\n\n\n\n\n此时会进入一个无限debugger，此时我们hook掉它来试一试，发现依旧无法通过；\n\n\n\n\n此时我们就可以想一想为什么无法停住，那么此时我们就需要将断点逐步释放，去抓一下网页加载的包，通过观察，我们发现了一个叫做php的文件，里面有一些关键词；\n\n\n\n\n我们都知道eval的作用就是将里面的字符串给执行一下，那么里面的内容是什么，貌似是看不懂的东西，我们在控制台执行一下；\n\n\n\n\n有点意思了，这好像就是我们看到的提示，那么这一段内容就会被执行，那么我们怎么把它关闭呢，在这里我们就需要用到一个本地替换；\n\n\n\n\n将目标文件在来源面板打开，打开之后右键这个文件名，选择替换内容；\n\n\n\n\n此时这个文件就与我们本地挂钩，我们就可以去尝试将目标代码注释看看效果；发现可以成功的抓包了，此时我们就可以抓到类似的数据包；\n\n\n\n\n这个包有很长的数据，大概就是我们需要的数据，那就证明数据是加密的，所以参数也是加了密的；那么这里开始我们才算真正的过了网页的反调试；\n我们首先来解决响应的解密，在做这个事情之前，我们可以发现我们替换的内容好像还有一段不知名内容，我们打上断点刷新整个页面看看能不能断住；\n\n\n\n\n此时可以断住，那么我们进入这个方法内部看看；\n\n\n\n\n可以看到，一个很庞大的方法体系，里面有各种方法，但我们也不知道哪一个是解密函数，我们就可以回到断点位置，单步执行看她做了什么事情；\n\n\n\n\n那么这虽然是解密了，但并不是我们需要的数据，我们再次刷新，进入方法里，在类似解密的返回处打上断点，看看最终会停留在哪里；\n\n\n\n\n此时停留在了这里，但我们输出结果发现貌似并没有解密，再次释放程序，看他下一步走哪里；\n\n\n\n\n很明显，这里应该就是我们数据解密的位置，那我们就可以在这个位置下断点，同时将其他位置的断点放掉；\n\n\n\n\n经过调试我们可以发现在这里数据进行了解密，将这两句方法拿下来；此时就可以看到肯定是缺了AES和BASE64这两个东西，但他们貌似不是标准的方法，所以我们去看他是怎么定义的；\n\n\n\n\n可以看到它是定义了方法的，我们直接拿下来就可以了，同时BASE64方法也是同理；\n\n\n\n\n但在这里又有不同，它new了一个Base，注意这里两个base并不是一样的，需要注意，这里要额外去拿这个方法；将缺失的都补上，此时会报错CryptoJS，这里我们就可以使用标准算法库；\n复制一段密文，看看本地能否解密成功；\n\n\n\n\n可以看到数据成功的解密了，那么我们接下来就需要去找到参数的加密位置；\n在这里我们同样可以进行分析，在解密方法里同样有很多加密方法，我们去打上断点，看程序会走到哪里；\n\n\n\n\n此时可以看到传进来的是明文，得到的确实密文，那么这里 大概率就是加密位置，我们去和已经生成的参数对比一下看看长度是否一致；\n\n\n\n\n长度是一致的，那么这里应该就是加密位置，我们同样将它拿下来；\n\n\n\n\n将方法补齐之后发现可以得到结果，但是位数始终是和网页上对不上的，那这个时候我们就需要注意一个问题，我们在使用本地替换md5的时候，需要将它的结果转成字符串一下，修改之后结果为正确的；\n\n\n\n\n那么参数和响应就都逆向完成了；\n\n","categories":["参数加密&响应解密"],"tags":["web逆向"]},{"title":"全国空气指数逆向","url":"/2023/11/30/%E7%A9%BA%E6%B0%94%E6%8C%87%E6%95%B0%E9%80%86%E5%90%91/","content":"一、全国空气指数https://www.aqistudy.cn/historydata/daydata.php?city=%E5%8C%97%E4%BA%AC&amp;month=2016101.需要逆向的值：\n表单加密\n响应解密\n\n2.逆向过程：\n首先直接搜索关键字，发现没有办法进行定位，所以在这里我们选择跟栈来处理；\n\n\n\n\n从发包的栈进入，去寻找参数从明文变成密文的位置，\n\n\n\n\n在调试过程，一般来说send和ajax一般都不会是他的加密位置，所以我们直接跟它的上一栈；\n\n\n\n\n此时观察作用域，可以看到我们的明文数据，此时就可以认为，加密位置就在这一栈，我们观察可以发现，加密位置就在断点的上方，那么加密位置我们也就找到了；是由pop···这个方法加密了我们的参数，它传了两个值，一个就是我们的表单参数一个是一个固定值，在这里我们直接将它们都拿下来；\n\n随后进入加密方法去看看它做了什么；\n\n\n\n\n\n进来一看一大堆，我也看不懂，直接拿下来补方法；但大概感觉还是一个AES，但肯定不是一个标准的；\n将对应的参数也拿下来，直接打印运行，肯定会报错，我们缺什么补什么就行；报错hex_md5，此时我们有两种选择：\n\n\n 直接去扣代码，将方法补上；\n 测试是否是标准加密；\n\n\n在这里我们去测试一下是否是标准加密，我们直接去控制台打印它加密1的结果；\n\n\n\n\n很明显这就是标准加密的结果，所以我们直接导入标准算法库即可；\n\n\n\n\n运行后报错osZ34YC04S，去找它是如何声明的，将它补上之后报错BASE64，一样的道理；\n\n运行后报错Base64，一样去将它拿下来，后续操作均是如此；将方法补上后有一个点需要注意；\n\n\n\n\n\n经过标准算法包加密的参数是一个数组形式，此时如果不注意直接使用此参数的话，将无法进行正确的请求；\n将加密方法封装为一个函数，与python进行交互，看看参数是否正确生成；\n\n\n\n\n运行看看是否能拿到加密的响应数据；\n\n\n\n\n数据成功拿到，接下来去找它响应的解密；\n直接同样的方法跟栈，在这里搜索关键字无法实现，其实在调试加密参数时，出现过一个decrypt，那为何在这里我们无法直接搜索关键字定位呢，因为他在VM文件里，就是虚拟文件，所以无法定位；\n在这里我们可以直接去同一个文件去找，也可以直接跟栈；\n\n\n\n\n经过调试这就是我们的解密函数，在这里我们新建一个文件将它扣下来；\n很明显会出现报错，和上述方法一样，并且他俩用到的方法其实差不多，去找对应的方法；\n\n\n\n\n最后运行即可解密成功，至此逆向完成；\n\n","categories":["参数加密&响应解密"],"tags":["web逆向"]},{"title":"红人点集逆向","url":"/2023/12/24/%E7%BA%A2%E4%BA%BA%E7%82%B9%E9%9B%86/","content":"一、红人点集https://dy.hrdjyun.com/1.需要逆向的参数：\n登录：pwd、sig；\n主页数据：sign；\n\n2.逆向思路：\n首先我们可以知道数据需要登录才能拿到，所以我们首先进行登录的逆向，观察密码参数的加密；\n\n\n\n\n可以看到密码其实就是一个md5加密，所以我们不用管他，直接去看sig参数，直接搜索sig:，就只有一个位置，打上断点触发请求，发现可以断住，那么大概就已经找到了加密位置，我们就可以进行分析；\n\n\n\n\n此时我们可以观察一下参数，；里面的密码已经是经过了加密的，但我们知道它的生成，所以不用去管它，如果不是清晰的知道，就需要去先找到密码的加密，首先是S函数处理了参数，我们在控制台看看它得到了什么；\n\n\n\n\n可以看到没啥变化，所以我们可以直接去掉，也可以去拿他的方法，当然这里我选择去掉；也可以拿下来，接下来就是这个H方法了，进入内部看看；\n\n\n\n\n可以看到其实就是转成了字符串然后加了盐，直接拿下来就行；那么就剩最外层的这个方法，看着挺复杂，点进方法内部看看；\n\n\n\n\n可以看到又是多层函数嵌套，将需要的涉及到的函数全都给拿下来；在这里我们需要将密码的加密也写上才行；\n\n\n\n\n登录参数的sig和pwd就结束了，那么我们封装成一个函数传递给py，进行登录看看能得到什么；\n\n\n\n\n可以看到返回的数据里，带了一个token的值，那么这个token有什么用呢，我们去主页抓包看看；\n\n\n\n\n可以看到，这里的token其实就是用户凭证，那么我们已经得到了这个token，就只需要逆向这个sign参数就可以去拿到数据了，我们直接搜索看看能否定位加密位置；\n\n\n\n\n很容易就能找到加密位置，可以看到确实是我们需要的sign值，n是我们传进来的明文参数，e是一个时间戳；那么看看E方法具体做了什么吧；\n\n\n\n\n可以看到其实逻辑也很简单，这里面不知情的其实就是C参数，它的生成在上方，调用了一个z方法，且没有传参，那么它要么是随机的，要么就是一个固定的，所以在这里没有疑问，直接固定就可以了；而z方法就在附近，他里面又调用了好几个方法，点进去看其实都是对固定值做的操作，那么这个C就是一个固定的，那么我们就只需要知道k方法就可以了；\n点进去看看他其实就是一个sha256加密算法，那么我们就去看它是不是标准的；\n\n\n\n\n如何进行测试，具体方式就是找一个加密工具或者在线加密，在控制台调用k方法，它们传一样的值，看看结果是不是一致的；\n\n\n\n\n那么他就是一个标准的加密，我们直接使用标准算法包就可以了；\n\n\n\n\n同样传给py，看看能否得到数据，此时需要带入刚刚得到的token值；\n\n\n\n\n可以看到成功的拿到了数据，那就证明参数逆向完成；\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"艺恩电影逆向","url":"/2023/11/29/%E8%89%BA%E6%81%A9%E6%95%B0%E6%8D%AE%E9%80%86%E5%90%91/","content":"一、艺恩艺恩-数据智能服务商_年度票房 (endata.com.cn)1.需要逆向的值：\n响应解密\n\n2.逆向过程：\n首先我们分析过后可以看出其堆栈是有一个ajax，在这种情况可以搜索JSON.parse(来找，搜索后发现数据有些多，所以我们先搜索其路径，再进行关键字搜索；\n搜索后打上断点，进行年份的切换；\n\n\n\n\n可以看出，e是我们的密文值，通过调试可以看出第二个为真正的解密方法，\n\n选中进入整个函数，发现其是混淆的，那就没有那么好辨别了；\n\n此时打上断点，通过刷新来进行断点，此时须将前面的断点给释放；之后再来进行调试；\n\n\n\n\n\n\n\n断住后执行单步调试，来看看程序是怎么走的；断点位置一定要对，因为经过调试程序是直接走到了var这一步，所以当我们断在this处时就没法正常的走；\n逐渐单步调试，观察作用域何时出现相应的密文值；\n\n\n\n\n当出现密文值时，可以进行观察，框住的地方很像我们某一个加密方式(对称加密)，将他们扣下来进行验证，在控制台输出时始终无法正确的输出，此时我们新建代码段，将这段代码复制过去，使用ctrl+s保存后运行，此时可以在控制台看到我们的明文结果；\n\n\n\n\n\n\n经过简单的调试我们可以知道，这就是一个DES加密，\n\n\n\n\n在这里由于是混淆的，我们选择将整个文件的代码都扣下来，因为它们其实是为一个整体；\n接下来执行webInstace.shell方法，为何会调用shell方法，是因为在此前调试的时候，我们在控制台执行混淆的代码时发现后续的混淆其实是shell方法；\n运行后报错navigator，其实这是由于环境的问题，在控制台输出后即可进行补环境操作，我测试过后，只补上ua即可；\n\n\n\n\n至此数据解密完成；\n\n","categories":["响应解密"],"tags":["web逆向"]},{"title":"考古加逆向","url":"/2023/11/30/%E8%80%83%E5%8F%A4%E5%8A%A0%E9%80%86%E5%90%91/","content":"一、考古加https://www.kaogujia.com/liveTopList/darenFansList/fansRise1.需要逆向的参数：\n返回的响应数据\n\n2.逆向过程：\n数据解密没有混淆直接搜索decrypt(关键词，直接定位到解密位置；\n\n\n\n\n在这里我们需要注意的是，它有两个数据接口，我们一定要确定我们的数据是哪一个接口；观察一下其实他就是标准加密，直接导包就可以了；再将相应的数据拿下来，即可完成解密；\n\n\n\n\n至此解密完成；\n\n","categories":["响应解密"],"tags":["web逆向"]},{"title":"软文街登录逆向","url":"/2023/12/24/%E8%BD%AF%E6%96%87%E8%A1%97%E6%95%B0%E5%AD%97%E9%AA%8C%E8%AF%81%E7%A0%81/","content":"一、软文街登录https://i.ruanwen.la/login1.需要逆向的参数：\n数字验证码；\n\n2.实现思路：\n首先我们分析登录的流程，首先请求一下验证码，可以得到一个响应，里面有图片的链接和请求图片需要带的token；\n\n\n\n\n所以我们的思路就是请求这个链接拿到图片，进行识别；\n\n\n\n\n这个即是图片的链接，我们请求之后通过模块来进行识别数字，然后带着识别的结果以及第一个请求的captcha_token即可进行登录操作，最后的实现如下：\n\n\n\n\n可以看到成功的请求了登录，至此验证码就成功过了；\npy代码如下：\n\n# coding: utf-8# File：1.软文街.py# Author：下雨天# Date ：2023/12/15 22:18import requestsimport ddddocrcookies = &#123;    &#x27;XSRF-TOKEN&#x27;: &#x27;eyJpdiI6IjJVYVNcLzY4WUdjTmVQdnluR21TVUNBPT0iLCJ2YWx1ZSI6ImRnalwvWjUyaXZSVEdXQ0RsRVpLVGlsN291T2s3NlVQTGZKQVBpbjdBemZZQ0JCeWpFTFNLY3RFMzkzbGNUbHlNIiwibWFjIjoiZWIwODg2ZDc4ZTQwMTQwMGVkYzViZGE3ZDI3Y2IxNDhlZWQzYWM0OTIzNzJjZmU2ZGQ3ODMwZTkxMGQ1MTcwNiJ9&#x27;,    &#x27;utm_fv&#x27;: &#x27;https://i.ruanwen.la/login&#x27;,    &#x27;SESSION_COOKIE&#x27;: &#x27;eyJpdiI6IklDRis3dzVBMWZwMzFDR1JkRUJPckE9PSIsInZhbHVlIjoiWVVhQUFXbUZmYjE5V0xpSEhEZGJ4V2hmd09mejNkSzcrUjgwd1RnTVwvNFM1S3p5MHVYYTlua0tPWU9VaWhYelkiLCJtYWMiOiI0ODAzYzI1YTkwMTBiZjc2OWZjMDE3NTI3NWYxNWI0YTk5MGE4ZTI5NDE4OWFkZDYzMGRkMzc2OTU5MGZkNGQzIn0%3D&#x27;,&#125;headers = &#123;    &#x27;authority&#x27;: &#x27;api.ruanwen.la&#x27;,    &#x27;accept&#x27;: &#x27;*/*&#x27;,    &#x27;accept-language&#x27;: &#x27;zh-CN,zh;q=0.9&#x27;,    &#x27;cache-control&#x27;: &#x27;no-cache&#x27;,    # &#x27;content-length&#x27;: &#x27;0&#x27;,    &#x27;origin&#x27;: &#x27;https://i.ruanwen.la&#x27;,    &#x27;platform&#x27;: &#x27;xinmeibao&#x27;,    &#x27;pragma&#x27;: &#x27;no-cache&#x27;,    &#x27;referer&#x27;: &#x27;https://i.ruanwen.la/login&#x27;,    &#x27;sec-ch-ua&#x27;: &#x27;&quot;Chromium&quot;;v=&quot;119&quot;, &quot;Not?A_Brand&quot;;v=&quot;24&quot;&#x27;,    &#x27;sec-ch-ua-mobile&#x27;: &#x27;?0&#x27;,    &#x27;sec-ch-ua-platform&#x27;: &#x27;&quot;Windows&quot;&#x27;,    &#x27;sec-fetch-dest&#x27;: &#x27;empty&#x27;,    &#x27;sec-fetch-mode&#x27;: &#x27;cors&#x27;,    &#x27;sec-fetch-site&#x27;: &#x27;same-site&#x27;,    &#x27;user-agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.6045.106 Safari/537.36&#x27;,    &#x27;x-identity&#x27;: &#x27;advertiser&#x27;,&#125;response = requests.post(&#x27;https://api.ruanwen.la/api/auth/captcha/generate&#x27;, headers=headers).json()# print(response)captcha_token = response[&#x27;data&#x27;][&#x27;captcha_token&#x27;]src = response[&#x27;data&#x27;][&#x27;src&#x27;]# print(src)# print(captcha_token)res = requests.get(src, headers=headers)# with open(&#x27;captcha.jpg&#x27;, &#x27;wb&#x27;) as f:#     f.write(res.content)# print(res.content)ocr = ddddocr.DdddOcr()code = ocr.classification(res.content)print(code)json_data = &#123;    &#x27;mobile&#x27;: &#x27;17312345678&#x27;,    &#x27;device&#x27;: &#x27;pc&#x27;,    &#x27;password&#x27;: &#x27;123456&#x27;,    &#x27;captcha_token&#x27;: captcha_token,    &#x27;captcha&#x27;: code,    &#x27;identity&#x27;: &#x27;advertiser&#x27;,&#125;response1 = requests.post(&#x27;https://api.ruanwen.la/api/auth/authenticate&#x27;, cookies=cookies, headers=headers, json=json_data).json()print(response1)\n\n","categories":["验证码"],"tags":["web逆向"]},{"title":"阿里房产逆向","url":"/2023/11/28/%E9%98%BF%E9%87%8C%E6%88%BF%E4%BA%A7%E9%80%86%E5%90%91/","content":"一、阿里房产阿里资产-房产频道 (taobao.com)1.需要逆向的参数：\n表单查询字符串参数：sign\n\n2.逆向过程：\n在这里我们依然使用关键词搜索法，搜索sign:，经过调试找到加密位置；\n\n\n\n\n此时我们可以看到sign是等于p，那我们去看看p在哪里；\n\n\n\n\n我们可以找到它的位置，并且将他们扣下来，在这里需要注意的是，他没有告诉我们它的加密方式，但我们可以通过某些特征来判断，在这里我们可以看到分组运算，那么大概率其实就是消息摘要算法；\n\n\n\n\n此时我们去看看具体加密了哪些东西，首先看o.token，它是从h5.request来的，大概率会是服务器返回的，我们在这里将它固定使用，其他的值我们均可以直接拿下来；\n拿下来之后运行即可得到我们想要的结果；\n\n\n\n\n至此加密完成；但是上方的token我们需要去看看怎样处理，搜索后发现它其实是响应返回的，我们可以先请求拿到他，再进行加密；\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"莫莫铺子逆向","url":"/2023/12/05/%E8%8E%AB%E8%8E%AB%E9%93%BA%E5%AD%90%E9%80%86%E5%90%91/","content":"一、莫莫铺子http://mmpz.ttzhuijuba.com/?r=/l&amp;cids=8&amp;site=classify&amp;sort=01.需要逆向的参数：\n请求载荷：sign:\n\n2.逆向过程：\n直接搜索关键字，就可以定位到加密的位置；\n\n\n\n\n那么此时就可以去看它具体做了什么事情；\n\n\n\n\n传了两个参数，其中一个是我们的表单信息，第二个参数貌似是固定的，所以在这里我们可以直接去找加密方法；\n\n\n\n\n那么实际上真正的加密位置就是这个方法，直接将它扣下来，然后将需要的参数也都拿下来，然后我们可以看到后续有一个md5方法，我们可以去测试一下是不是标准加密，如果是就可以直接导包，经过测试可以发现他就是标准加密；\n\n\n\n\n那么也就没什么可以说的了，运行即可得到结果；\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"逗游网逆向登录","url":"/2023/11/28/%E9%80%97%E6%B8%B8%E7%BD%91%E7%99%BB%E5%BD%95/","content":"一、逗游网https://www.doyo.cn/passport/login?next=https://www.doyo.cn/1.需要逆向的参数：\n表单：password\n\n2.逆向过程：\n直接跟栈；\n\n\n\n\n进入后可以很明显的看到我们的加密位置；\n\n\n\n\n首先是Sha1.hash这个方法对密码进行了加密，然后再使用同样的方法加密nonce、ts、和加密过的密码这三个参数相加的结果，那么这里会有两个新的参数，我们查看可以发现一个是时间戳，一个是密文，那么这里我们就需要去找那一个密文了；\n\n\n\n\n每一次登录的时候都会发两个包，那么这一个包就是我们需要的那两个参数，所以再进行密码的逆向时，首先需要去对这个包进行请求得到这两个值，在它的载荷里有两个参数；\n\n\n\n\n可以看到一个是我们的用户名，还有一个是随机值，我们可以自己生成它，因为是随机的，所以自己生成也是可以的，在这里我们去找找它的生成位置在哪里；\n\n\n\n\n可以看到它的生成其实就是一个随机值，那么在这里我们暂时将那两个参数固定使用；\n然后我们就可以去扣Sha1.hash这个方法了，进入内部，发现一共就一百多行，我们直接全扣；然后再次运行；\n\n\n\n\n参数逆向完成，只需要请求另一个包，拿到它的值，然后传递给js就可以了；\n\n","categories":["参数加密"],"tags":["登录逆向"]},{"title":"雪球网逆向","url":"/2023/12/24/%E9%9B%AA%E7%90%83%E7%BD%91%E9%80%86%E5%90%91/","content":"一、雪球网https://xueqiu.com/today1.需要逆向的参数：\ncookie：acw_sc__v2\n\n2.逆向思路：\n在这个网站我们知道了它是cookie的加密，但我们也不太方便找到加密位置，具体原因会通过调试得知；首先我们需要清除cookie，然后点击文档抓包，在这里使用fd抓包更好，能够看出它是经过了两次请求，首先可以进行刷新；\n\n\n\n\n此时遇到了一个debugger，在这里我们可以使用一种方式来处理，但是这种方式只适合这种cookie参数，点击单步执行进入；\n\n\n\n\n此时会进入一个虚拟文件，如果使用fd抓包就可以发现，这是第一次请求返回的内容，也就是它生成的我们的第二次cookie，但此时是在vm文件里，所以我们需要放掉程序；此时又会进入一个debugger，我们需要使用hook的方式来过掉它；\n\n\n\n\n\n\n运行这段代码后可以发现我们跳出了vm文件，而是进入到了真正的文件；\n\n\n\n\n那么我们就可以看到x就是我们的v2值，我们就需要去往上跟栈；\n\n\n\n\n可以进行调试，发现其实arg2就是我们的参数，那就可以去扣代码了；\n\n\n\n\n那么在这里就需要去解混淆了，在这里需要一个解混淆网站，如下：\n\nhttps://deobfuscator.kuizuo.cn/#eNptkTtPwzAUhf/LnTMAEks2+prahQoWxODap65Vcx3sm9Ko6n/HSZooPNZzz+OT7oU0lUQFBSov5NJWYmD7jI9wApV75RMKYiSBWfEClRyofCiycQEdm0pWvGS18zBUSqyz1wz6OmglLvAGcgj5TFp5Pw81S14bXfNRLO8f7wraOfsUowfbdqmTcFLZYjJOy2mQnM0kt3wvutQTT+SeBmfoW31Hnef0zLGKTY89+NqCyiuNeeAkiuXvue1/4TrBzHzQx/9Pryq6Npim5yQhYovPGqzHSgMPwfIsUf3e2qh4/Kkd0XyFaHLrWw7uamsR6b31roOdBB27vYMZwt37rtdv56KrfA==\n\n\n将整个代码复制进去点击运行进行解混淆；在这里代码其实并没有完全解混淆，需要在控制台进行输出改写；\n\n\n\n\n解开之后将需要的方法补齐即可，效果如下：\n\n\n\n\n这里的arg1是需要从第一次的返回值里取到的，第二个参数经过多次测试是固定的，运行即可得到结果；\n\n\n\n\n至此逆向结束；\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"青海移动逆向登录","url":"/2023/11/30/%E9%9D%92%E6%B5%B7%E7%A7%BB%E5%8A%A8%E9%80%86%E5%90%91%E7%99%BB%E5%BD%95/","content":"一、青海移动https://www.iqhmall.cn/shopweb/logon/logon/1.需要逆向的参数：\n\n2.逆向过程：\n首先搜索mobile，结果太多了，这里我们从他的启动器进入，打上断点，重新请求之后，去跟栈；\n\n\n\n\n往前面跟两栈之后我们发现找到了加密的位置，并且四个我们都找到了，观察发现加密的方法是同一个，那么我们只分析mobile即可；\n分析后可以得知括号里就是我们输入的手机号，那么我们直接去看它的加密方法，进入内部，\n\n\n\n\n导包即可，后续差什么补什么即可，最终完成加密；\n\n\n\n\n四个加密都是同一个方法，所以只加密一个即可；\n\n","categories":["参数加密"],"tags":["登录逆向"]},{"title":"风行网逆向登录","url":"/2023/11/30/%E9%A3%8E%E8%A1%8C%E7%BD%91%E9%80%86%E5%90%91%E7%99%BB%E5%BD%95/","content":"一、风行网http://www.fun.tv/1.需要逆向的参数：\n表单：password\n\n2.逆向过程：\n首先可以观察pass的值，7c4a—，因为我们输入的密码是123456，这个很明显是sha1标准算法的值，但位数是不够的，所以应该是取了位数的，我们直接去跟栈，这里我们直接选择login进行跟栈；\n\n\n\n\n进入之后其实就很明显就能看到加密位置了，我们对加密进行分析；\n\n\n\n\n可以看到确实是取了一个位数，我们不需要去知道它取了什么，直接拿下来就可以了，之后就可以分析hex_sha1是做了什么，其实做到这里已经可以直接去用标准算法了，但也可以扣代码；\n\n\n\n\n可以看到，r就是我们的明文密码，里面有几个方法，所以我们去找那些方法在哪里，其实就在它的上方，然后将需要的拿下来，后续也是会报错，报什么错我们直接去把对应的方法拿下来就可以了；\n\n\n\n\n至此加密完成；\n\n","categories":["参数加密"],"tags":["登录逆向"]}]