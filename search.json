[{"title":"36氪逆向","url":"/2023/11/29/36kr%E9%80%86%E5%90%91/","content":"一、36氪看《完蛋！我被美女包围了》如何教“影视综”做人-36氪 (36kr.com)1.需要逆向的值：\n在静态页面里的响应加密；\n\n2.逆向过程；\n在数据接口中，我们找不到数据的返回，那么此时我们就可以怀疑是不是在静态页面藏着了，往下找，可以找到一串密文，此时我们暂且认为它就是我们需要的数据；\n\n\n\n\n找到了数据就可以着手开始解密了，搜索decrypt(方法，可以找到三个相应的地方，分别打上断点；\n断住后可以明显看到，AES加密；re是我们的密文数据，ne在上方有声明；\n\n\n\n\n在控制台输出结果，很明显，将方法扣下来，再导入标准算法包即可解决；\n\n\n\n\n至此数据解密完成；\n\n","categories":["响应解密"],"tags":["web逆向"]},{"title":"99安全网逆向登录","url":"/2023/11/29/99%E5%AE%89%E5%85%A8%E7%BD%91%E9%80%86%E5%90%91%E7%99%BB%E5%BD%95/","content":"一、99安全网https://aq.99.com/V3/NDUser_Login.htm1.需要逆向的参数：\n表单：txtPassword\n\n2.逆向过程：\n直接搜索关键字，只有一个结果，比较好找；\n\n\n\n\n就在其上方就可以找到我们的加密方法，可以看到我们的加密方法是getMD5Value，那么我们进去看看他是做了些什么；\n\n\n\n\n这里的data就是我们的明文密码，return了我们的密文，那么可以看到还有一个MD5方法处理了我们的参数，进去看看，其实就在上方，将这些方法都拿下来，运行后报错什么都去补上即可；\n\n\n\n\n至此加密完成；\n\n\n","categories":["参数加密"],"tags":["登录逆向"]},{"title":"BTC逆向","url":"/2023/11/28/BTC%E5%8C%BA%E5%9D%97%E9%93%BE%E9%80%86%E5%90%91/","content":"一、BTCBitcoin浏览器交易列表 | page区块链浏览器 (oklink.com)1.需要逆向的参数：\n请求头：X-Apikey\n\n2.逆向过程：\n首先进行关键字搜索，发现只有一个结果，进行断点并未断住，那么我们可以去跟栈，但是这里跟栈也不是很好跟，在搜索的时候，往往可以发挥想象，如果正常搜不到我们可以去掉一个x再来搜索，这次结果比较多，并且通过调试我们应该是找到了我们需要的加密位置；\n\n\n\n\n对这个方法进行分析，t就是时间戳，e是通过另一个方法来获取的值，然后通过一个方法来处理了我们的t值，最后通过comb方法处理这两个参数；那么在这里我们需要扣的方法就有三个；\n首先我们来看encryptApiKey()方法，其实在上面这种函数的表达形式形式就可以看出来，大概都是在同一个文件里，我们进入方法里去看看；\n\n\n\n\n在这里扣代码的时候要注意观察代码，在里面是调用了一个api_key的，所以我们将它一同拿下来；\n然后就是encryptTime和comb这两个函数，我们将他们一起拿下来，\n\n\n\n\n至此我们的方法就都拿下来了，但在运行的时候我们会有需要注意的地方，在浏览器扣的时候，他是使用this.方法的形式去调用，此调用形式是由于他在这个对象里调用，很显然我们运行的时候不能这么调用，所以带有this的我们需要将它去掉再运行；\n在这里会报错i；\n\n\n\n\n选中i.Z可以看到它其实是一个浏览器window对象，btoa是它里面的方法，在这里我们有两种方法：\n\n\n 将i.Z直接删除，或许nodejs也有自带这个方法，所以它能够执行；\n 既然它是window，那么我们直接改成window，在顶部定义window &#x3D; global；定义为全局变量；\n\n\n再次运行即可完成加密；\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"中国五矿逆向","url":"/2023/11/28/%E4%B8%AD%E5%9B%BD%E4%BA%94%E7%9F%BF%E9%80%86%E5%90%91/","content":"一、中国五矿中国五矿集团有限公司采购电子商务平台 (minmetals.com.cn)1.需要逆向的值：\nparam，位于表单参数；\n\n2.进行逆向：\n首先观察发的包，可以看到有个public公钥文件，由于没有混淆，所以可以直接搜索param参数来进行查找，但很显然关键词太过于宽泛，所以我们不使用这个方法；\n所以我们搜索公钥的路径，因为公钥在每一次加载的时候都会一起加载，所以必然是有用的；搜索后定位到一处，打断点可以断住，那在此处进行分析；\n\n\n\n\n通过调试，可以找到s即为我们要的param参数，在作用域处可以看出公钥也在一起加载；\n\n在这里，将主体加密方法扣下来\n  t.setPublicKey(r),   //公钥的载入a = m(m(&#123;&#125;, e), &#123;&#125;, &#123;    sign: f()(JSON.stringify(e)),    timeStamp: +new Date&#125;),s = t.encryptLong(JSON.stringify(a))\n\n\nr为我们的公钥，它必然是随机的，但在此处先将其固定，后续再做处理；具体的逻辑为：\n\n先生成a值，再对a值进行处理生成s；\n\n\n首先对t进行处理，向上找到t的生成；\n\n\nt = new v[&quot;a&quot;]\n\n\n再往上找，可以看出，为webpack；\n\n\n\n\n所以我们的逻辑就是先找此处的t，找到之后再对9816进行补全；\n将断点放掉，刷新，注意，此时分页无法在此处断住，刷新即可；鼠标放在t处，进入程序的入口；\n找到后我们就可以开始扣代码，但不能全扣，图中即是我们需要扣下来的代码；\n\n\n\n\n扣下来之后，在末尾跟上 ({}) ，随后选中t(“9816”)进入其函数，搜索9816，将其拿下来，拿下来后放在上述添加的大括号里，并在函数前加上一个！将其改为自调用函数，（其原是多文件webpack，我们扣下来之后他是单文件，所以我们需要将其改为多文件）；\n此时运行，报错window，这是由于我们引用多文件时没有引用到，可以在顶部加上如下代码：\n\nwindow = global; //全局变量\n\n\n再次运行，t未被定义，此时我们在自执行函数上方声明一个zt；再内部接受我们的加载器，在此处即为o；\n\nvar zt;\n\n\n\n\n报错时，在报错处打印下标，进行调试，\n\n\n\n\n调试后发现还调用了a524，所以我们将它拿下来，拿下来之后报错m没有被定义，此时回到源代码处寻找m的逻辑，将其扣下来；\n\n\n\n\n\n\n运行后，报错为e没有被定义，此时将程序放掉，重新分页，确保此时是我们需要的接口；在控制台输出e值大概看出来应该为我们的参数，将其复制并进行声明；\n再次运行报错d，可以看出是m里报错，所以我们进入m函数里进行查找，可以发现d函数就在m上方，将其拿下来；后续报错b，发现b也在下方，将其拿下；\n之后f没有被定义，我们选中f()，进入函数内部，\n\n\n\n\n毫无疑问，md5加密，加密了t和e值；打上断点走进来，发现t为我们的参数，我们将t值进行复制，找一个在线md5加密来进行验证，看他是不是标准的md5加密；通过实验可以看出，其是为标准的md5加密；\n\n在此时我们就可以直接导包来解决，并写上一个md5的加密，再进行替换：\n\n\n\n\n\n\n\n此时，t.encryptLong 未被定义，我们一样去寻找，将程序走到相应的位置，进入函数进行扣取；\n运行后报错w，同样的逻辑，去找到他的函数定义，扣下来即可；\n\n\n\n\n参数生成成功；\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"上海海事局逆向","url":"/2023/11/30/%E4%B8%8A%E6%B5%B7%E6%B5%B7%E4%BA%8B%E5%B1%80%E9%80%86%E5%90%91%E7%99%BB%E5%BD%95/","content":"一、上海海事局https://www.sh.msa.gov.cn/zwzx/login1.需要逆向的参数：\n表单：\n\n​\t\t-user_name  -password  -login_code\n2.逆向过程：\n直接跟栈，进入其实就直接能看到加密位置；\n\n\n\n\n我们需要的三个参数都在这里，在这里其实code这个参数是验证码的加密，所以后续肯定是变化的，在这里我们直接固定测试；\n经过调试其实可以发现真正加密其实是下面这三行，那么我们进行相应的分析；\n\npass = encrypt.encrypt(hash);user_name = encrypt.encrypt(username);login_code = encrypt.encrypt(logincode);\n\n\n密码加密的是一段hash，我们不知道是啥，是一段密文，我们往上找找，因为我输入的密码是123456，其实很明显他就是做了一个md5加密；\n\n\n\n\npassword即是明文，剩下两个都是传的明文，我们直接去找加密方法，它们三个可以看到都是同一个加密方法，看到var encrypt &#x3D; new JSEncrypt()，其实我们就直接去拿全部代码就好了；\n将公钥拿下来，他直接可以使用，再是先对密码进行一个MD5加密，再加密加密后的值，再补上相应的东西即可；\n\n\n\n\n至此加密完成；\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"中国土地网逆向","url":"/2023/11/28/%E4%B8%AD%E5%9B%BD%E5%9C%9F%E5%9C%B0%E7%BD%91%E9%80%86%E5%90%91/","content":"一、中国土地网中国土地市场网 (landchina.com)1.需要逆向的参数：\n请求头Hash；\n\n2.逆向过程：\n在开始逆向时，hash关键词可以告诉我们什么，它必然不简单，使用.length方法来判断一下它的长度，结果是64位，由此可以得知它大概是sha加密算法；md5一般则是32位；（消息摘要算法）\n首先进行关键字搜索，搜索结果太多，这种方法不好使；在此我们可以使用追栈的方法；\n从启动程序进入，打上断点，进行分页；此时断住，\n\n\n\n\n在右侧堆栈我们可以看到有异步回调，在request里一般包含了拦截器，一般又分为响应和请求拦截器，但是很显然响应拦截器跟我们没什么关系；\n点击request进入，打上断点，进行分页，然后观察作用域的p里面包含的方法，\n\n\n\n\n从里面的方法进去(0，1)其余是响应拦截器，可以看出是一个请求拦截器，在拦截器处进行断点，此时放掉上一步的断点；进行分页，此时断点位置应该是return处；\n\n\n\n\n断住后将return的内容在控制台打印，发现是一个类似于数组的东西，此时我们将其toSting()转变一下，可以看出就是我们需要的东西；\n分析到此处，其实可以明白，这即是我们需要的加密方法；将主体方法扣下来；并将需要的参数取值拿下来；\n此时可以看出，n即为我们的加密函数，所以我们进去一探究竟；\n\n\n\n\n进入函数之后我们发现他是为一个初始化方法，在一般情况，此时我们点击箭头处进行下一步，观察它在哪一个对象进行的初始化操作，观察作用域；\n\n\n\n\n我们可以发现，此时作用域有值了，我们继续下一步走出这个方法；\n\n\n\n\n\n\n走出之后很显然，是SHA256，与我们刚开始的猜想是一致的；那接下来就很显然了，导入标准算法包，然后编写一个sha256加密算法，将n替换，即可完成；\n\nconst CryptJS = require(&#x27;crypto-js&#x27;)function sha256(text)&#123;    encryt1 = CryptJS.SHA256(text).toString()    return encryt1&#125;\n\n\n\n\n自此加密完成；\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"丰巢逆向登录","url":"/2023/11/29/%E4%B8%B0%E5%B7%A2%E9%80%86%E5%90%91%E7%99%BB%E5%BD%95/","content":"一、丰巢丰巢官网—丰巢自助寄快递服务 (fcbox.com)1.需要逆向的参数：\n表单：password\n\n2.逆向过程：\n直接启动器跟栈，进去之后打断点向上跟，\n\n\n\n\n向上跟一栈就很容易找到加密的位置，打上断点并将上一个断点释放，我们看看这里是不是真正的加密位置，很明显他就是我们的加密位置，那么只需要去扣方法了；\n\n\n\n\n进入方法后很明显可以看出ze是一个加载器，这看着像是一个webpack，最后面必然是导出了这个ze，在这里我们直接将全部代码扣下来即可；\n运行后报错，此时我们选择自己来导出这个加载器，使用window.JSEncrypt &#x3D; ze来导出，在上方补上相应的环境即可；在观察代码时可以发现有一个公钥，我们可以去找找，其实他是另一个请求返回的，它有可能是固定的，也有可能是变的，但在这里我们将它固定使用；\n\n\n\n\n至此加密完成；\n\n","categories":["参数加密"],"tags":["登录逆向"]},{"title":"中国观鸟记录中心逆向","url":"/2023/11/28/%E4%B8%AD%E5%9B%BD%E8%A7%82%E9%B8%9F%E8%AE%B0%E5%BD%95%E4%B8%AD%E5%BF%83%E9%80%86%E5%90%91/","content":"一、中国观鸟记录中心http://www.birdreport.cn/home/activity/page.html1.需要逆向的参数：\n请求头：Sign、Requestid\n表单加密\n响应解密\n\n2.逆向过程：\n首先可以搜索一下sign，发现是没有办法进行定位的，所以在这里我们选择hook；随意找一个jsonhook脚本即可；\n\n\n\n\n在这里我们的hook代码如上图，注意此时不能刷新，否则hook代码会失效，运行我们的hook代码后进行分页，此时就可以断住；\n\n\n\n\n可以看到我们hook到的参数就是我们的表单数据，那么证明我们找对地方了，此时有两种方法：\n\n\n 单步调试将这个hook代码走完，直到它跳转；\n 直接向上跟一栈；\n\n\n此时我们可以看到e是我们的明文参数，加密之后的结果就是它运行后的结果，那么表单的加密也就是在这里；\n\n\n\n\n那么在这里我们可以看到在上方有一个公钥信息，其实很明显，他就是一个RSA加密；\n\n\n\n\n我们将需要的代码扣下来，然后给它定义，var JSEncrypt &#x3D; require(‘node-jsencrypt’);那么表单的加密就可以完成；\n其实请求头的两个参数也很明显，d就是我们的Requestid，f就是Sign参数，它们的生成也在上方，将具体的方法拿下来就可以了；\n在这里其实可以发现里面是有用到其他的方法，其实也就在上方，将它们也都拿下来，那么就只剩sign参数了，我们可以看到它是由MD5函数加密了edc三个参数，其实它应该就是标准加密，我们可以测试一下，经过测试我们可以确定他就是标准加密，那么我们直接导包就可以了；\n那么三个参数就都解决了；\n\n\n\n\n那么我们就可以来看响应的解密了，在这里我们可以去搜索，但我们依然选择hook的方式，使用另一个代码；\n\n\n\n\n很明显我们已经定位到我们的解密位置，我们直接进入那个方法就可以了；\n\n\n\n\n进入后其实也很明显了，就是一个AES解密，直接将这里的key和iv固定使用即可；\n\n\n\n\n至此逆向完成；\n\n","categories":["参数加密&响应解密"],"tags":["web逆向"]},{"title":"同花顺逆向","url":"/2023/11/29/%E5%90%8C%E8%8A%B1%E9%A1%BA%E9%80%86%E5%90%91/","content":"一、同花顺A股市场_同花顺行情中心_同花顺财经网 (10jqka.com.cn)1.需要逆向的值：\n在请求头可以找到cookie和Hexin-V两个值，但值相同，其实只需要破解一个；\n注意：本案例需要用到工具一键补环境；\n\n2.逆向过程：\n首先在这里我们有多种方法，但在这里我们选择hook的方法来hookv值，因为问财网其实跟它是一个道理；\n\n\n\n\nhook代码如上图，直接运行后进行分页；\n\n\n\n\n断住后向上跟栈，找到生成v值的位置；\n\n\n\n\n可以发现n就是我们的值，那么我们进入它的生成方法，可以发现他就是我们的O方法；而仔细看o方法其实也就是做了一些浏览器相关的检测，所以在后面我们就需要去补环境；\n\n\n\n\n在这里我们的需求就是将O函数导出，然后在外部进行调用；具体的方案就是在O函数下方使用一个变量接受它，然后在顶部声明它，最后就可以在外部进行调用了；\n运行后它会报错document，很明显这就是我们的浏览器环境，在这里我们使用jsdom来补环境，首先需要安装jsdom，指令为：\n\nnpm install jsdom\n\n\n然后就是一个框架，补上去即可；\n\nconst jsdom = require(&quot;jsdom&quot;);const &#123; JSDOM &#125; = jsdom;const dom = new JSDOM(&#x27;&lt;!doctype html&gt;&lt;p&gt;Test&lt;/p&gt;&#x27;)window = dom.windowdocument = window.documentnavigator= window.navigator\n\n\n补上之后运行即可，他会有报错，但不影响值的生成；\n\n\n\n\n至此参数逆向完成；\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"吉林长春产权交易中心逆向","url":"/2023/11/28/%E5%90%89%E6%9E%97%E9%95%BF%E6%98%A5%E4%BA%A7%E6%9D%83%E9%80%86%E5%90%91/","content":"一、吉林长春产权交易中心http://www.ccprec.com/navCqzr/#/cqzr1.需要逆向的参数：\n请求载荷\n响应数据\n\n2.逆向过程：\n在这里我们直接选择下xhr断点，直接跟栈也是一样的逻辑；\n\n\n\n\n执行分页，断住后我们可以看到我们的参数已经是密文状态，那我们就去向下跟栈，我们跟栈的目的就是找到它在哪里从明文变成密文；\n\n\n\n\n经过调试可以看到此时明文参数是a，那我们就去找a的生成以及加密，那么很显然就找到了；那么此时就可以将xhr断点进行释放，去看看代码，a值就是o值进行了一个字符串的转变，那么o值是什么，我们可以看到o值里面是有一些参数，但我们不确定他们是不是固定的，我们去看看o的生成位置；\n\n\n\n\n可以看到o值一共有好几个数据，我们一个一个来看它的生成；\n\n\n\n\n在这里其实就可以看出，o是经过了两次赋值，第一次对一部分赋值，第二次对acts赋值，那么可以去找找具体参数的生成；\n第一个id是一个随机的值，并且args里的id也是这一个方法生成的；\n\n\n\n\nprojectKey是固定的值，经过调试clientKey也是固定的值；那么也就是那两个id是变化的；\n那么在这里，我们首先需要把o给生成，直接复制o的值，然后再进行修改；\n那么在上述分析中，只有那两个id是变化的，所以我们只需要去生成id即可，进入函数内部，直接将方法拿下来；拿下来之后运行报错e，那么我么去分析，可以看到它是一个数值，然后将它转成字符串，并且每进来一次他就会加1，其实就是记录我们调试的次数，那么我们直接给它一个数值就可以了；\n再次运行报错this.randomStr is not a function，那么我们去拿它对应的方法就可以了；后面是同样的逻辑，补完之后我们打印一下这两个id；\n\n\n\n\n可以看到我们是成功的生成了两个变化的参数；在这里拿方法的时候有一个需要注意的点，在拿下来的方法里调用的命令一般都是this.randomStr的形式，在这里我们最好是去掉this以便我们可以正常调用；\n那么现在我们得到了它的参数，就可以去对它进行加密了；进入我们的加密函数，去看看做了些什么；\n\n\n\n\n进入这个函数可以看到，他做了一个类似于判断，那这里我们可以打上断点进行调试；\n\n\n\n\n然后观察程序是怎么执行的，一步一步进行调试；\n\n\n\n\n可以看到它并未走中间的代码，那么我们直接扣其他的代码即可；很明显，当中还是有其他方法在的；直接去扣encryptCode方法；\n\n\n\n\n很明显里面同样有很多this.方法，将this去掉，并且将方法都补上，随后会报错.length，可以看到是pubPassNum的问题，那么我们同样去找到它；\n\n\n\n\n观察一下其他几个貌似也有用，都拿下来；可以发现setpass会报错，同样将它拿下来，此时注意调整代码的顺序，再执行代码，就可以生成我们的表单参数；\n\n\n\n\n此时我们利用程序测试一下是否可以成功请求；\n\n\n\n\n可以看到成功发起了请求，那么我们就可以进行响应数据的解密了；\n数据解密我们老方法，直接搜索关键字，decrypt(,发现没有，那么搜索另一个关键字JSON.parse(，有很多，但其实只要细心一点在分析参数的时候就已经发现它的解密方法了；\n\n\n\n\n所以解密方法就是decryptCode(e)这玩意，e就是我们的密文数据，直接扣它的方法就可以了，当然它需要的方法我们都已经扣过了，拿下来直接运行就可以了；\n\n\n\n\n与python进行交互，可以看到解密成功，page参数传给js，后生成参数再请求；\n至此逆向完成；\n\n","categories":["参数加密&响应解密"],"tags":["web逆向"]},{"title":"国家开放大学逆向登录","url":"/2023/11/30/%E5%9B%BD%E5%AE%B6%E5%BC%80%E6%94%BE%E5%A4%A7%E5%AD%A6%E9%80%86%E5%90%91/","content":"一、国家开放大学访问控制系统 (ouchn.cn)1.需要逆向的参数：\n\n\n大概可以看到会有4个参数需要逆向，但凡事先不要慌，不要着急去开始，我们可以看到下面两个参数，&#x3D;号结尾，很有可能是b64的编码，那么我们去看看他是不是；\n\n\n\n貌似他俩都是路径之类的，所以不需要逆向，那么真正需要逆向的值就是IDToken1，IDToken2；\n\n2.逆向过程：\n此时我们可以看到login是一个文档，没有办法去进行跟栈和其他操作，此时我们进行搜索，发现没有东西，需要点击返回登录，然后再次刷新；此时即可搜索到；\n但是我们可以发现，找到的地方均不像是加密的位置，那么我们这里也有其他的方式可以实现，一般这种document请求我们可以去元素面板去找它的输入框的id，因为他是唯一的嘛，所以可以尝试一下；在这里我们尝试搜索它的idpassword，搜索后我们来尝试定位；\n\n\n\n\n此时进行登录，发现是断住了，那么我们来看看具体是干了什么；\n\nvar loginName = $(&quot;#loginName&quot;).val();var password = $(&quot;#password&quot;).val();var validateCode = $(&#x27;#validateCode&#x27;).val();\n\n\n上述代码，其实就是根据id去取值，类似于选择器吧；\n\n\n\n\n可以看到就是我们输入的值；但经过分析，我们发现它仅仅只是做了取值，并没有做加密，那么我们还得继续下断点；\n\n\n\n\n很显然，这里就是执行了加密，后续的random同样是取了一个值，我们拿下来固定即可；然后将主体加密方法扣下来，再去找他的方法，strenc；\n进入函数内部，我们可以发现本身代码就并不多，那我们干脆将整个代码都拿下来，之后再次运行，就成功生成了我们的参数；\n\n\n\n\n用户名的话其实可以看到它是同一个加密方法，那么就无需再进行操作；至此参数加密完成；\n\n","categories":["参数加密"],"tags":["登录逆向"]},{"title":"企名片逆向","url":"/2023/11/29/%E4%BC%81%E5%90%8D%E7%89%87%E9%80%86%E5%90%91/","content":"一、企名片https://www.qimingpian.com/innovate1.需要逆向的参数：\n响应数据解密\n\n2.逆向过程：\n直接搜索decrypt，发现没有断住，那么我们可以搜索JSON.parse来定位，在这里可以很轻松的定位到具体的解密位置；\n\n\n\n\n可以看到这就是解密位置，我们看看它具体做了什么，首先是a.a.decode方法对我们的密文进行了处理，然后再是外部的o方法处理了一堆东西；那么我们现在就可以去扣具体的方法了，首先处理a.a.decode方法，进入内部，直接将它拿下来；\n然后去处理o方法，同样也是将它直接拿下来，之后运行报错f，那么我们去看看f是什么，将程序走到报错的位置，可以看到它并不是一个方法；\n\n\n\n\n并且它在上方其实就有声明，同时还有一个l，在后续其实是用到了它，也一同拿下来；再次运行即可完成解密；\n\n\n\n\n至此数据解密完成；\n\n","categories":["响应解密"],"tags":["web逆向"]},{"title":"幻藏逆向","url":"/2023/11/29/%E5%B9%BB%E8%97%8F%E9%80%86%E5%90%91/","content":"一、幻藏发售日历 - 幻藏艺术平台 (huancang.art)1.需要逆向的参数：\n请求头：\n-Signature\n-x-token\n\n\n2.逆向过程：\n通过关键字搜索，可以定位到，打上断点进行分页；\n\n\n\n\n两个参数均在这里，控制台打印后释放，发现这里就是真正的加密位置；\n首先我们来分析x-token，他是J方法来处理了e，进入J方法；\n\n\n\n\n可以看到她告诉了我们是md5加密，有时候他会是一个init方法，那么也可以逐步往下走也可以看到；\n返回原始位置来分析具体做了些什么事；\n\n\n\n\n可以看到，在最开始e是我们的参数，在后续进行了两次处理，在上方e值进行的首次处理；\n\n\n\n\n此时将这个方法扣下来，在此它处理的参数是我们的A.data，它是一些参数，我们复制下来；下方还有一个a.url我们也拿下来；\n此时打印一下e值，报错ci，那我们去看看它是什么，将它拿下来再运行即可；此时我们的e就成功生成了；\n\n\n\n\n在上面我们也知道了他就是一个md5加密算法，那直接写一个算法再使用就可以了；\n\nconst CryptoJS = require(&#x27;crypto&#x27;)function md5(text)&#123;    return CryptoJS.createHash(&#x27;md5&#x27;).update(text).digest(&#x27;hex&#x27;)&#125;\n\n\n使用这个md5去加密我们的e值，即可得到结果；\n\n\n\n\n在此解决了一个参数，那么我们再去看看另一个参数具体是在哪里生成的；\n\n\n\n\n我们很容易就可以看到，他其实就是加密了两次J方法将那一串字符串，而我们在上面的分析得知了它是md5加密，那么也就很简单了；其实可以看出来它就是固定的，直接拿下来就能使用；\n\n\n\n\n至此参数加密完成；\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"建设库逆向","url":"/2023/11/28/%E5%BB%BA%E8%AE%BE%E5%BA%93%E9%80%86%E5%90%91/","content":"一、建设库建筑施工企业资质查询_建筑企业经营范围_成立时间_人员查询_第4页_建设库 (jiansheku.com)1.需要逆向的参数：\n请求头sign参数；\n\n2.逆向过程：\n首先通过搜索关键字，发现实现是太多，所以我们使用路径+sign的方法来进行搜索，发现也没有得到我们想要的结果，所以我们使用xhr路径断点来分析，发现也没有办法找到相应的参数，那我们此时只能来看它的启动器了；\n\n\n\n\n图中的t.exports是webpack，在request里会有他相应的拦截器，我们通过它进去；\n\n\n\n\n断点停留，在作用域可以看到v里会有一些函数，就是它的启动器，因为它是异步回调了v里的方法，第一个是error相关的所以我们不需要观察它，进入第二个函数，我们能看到如下：\n\n\n\n\ninterceptors即是它的拦截器，将上一个断点放掉，在请求拦截器打上断点，同时释放程序，观察作用域；\n观察可以看出，此时我们的参数并没有生成，那么我们单步执行进入这个函数；\n\n\n\n\n进入后其实就很清晰了，这里大概就是我们需要找的加密位置；经过调试，大概也就找到了它的具体加密方法；\n\n\n\n\n此时就可以将它扣下来；扣下来之后我们首先将基本的参数补齐，time就是在上方的时间戳，e.data我们在控制台输出发现是我们的请求参数，那么直接复制下来；\n复制之后观察代码，去网页把eu方法拿下来，运行后报错，同样去拿下来，将eu，nu，tu方法补齐后再次运行报错Jc；将Jc拿下来之后，报错Zc，我们去看看他是怎样构成；\n\n\n\n\n此时我们可以看到zc的生成似乎没办法拿下来，那我们打上断点让程序走过来，点击下方的zc进入函数，进入后我们发现它停留的位置貌似不怎么对，这是webpack的原因，所以此时我们执行单步执行看看；\n\n\n\n\n\n\n测试一下，其实就是一个md5加密；那么我们直接导包来进行替换；\n\n\n\n此时我们打印一下，发现成功执行；\n\n\n\n\n至此参数成功生成；\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"掌上高考逆向","url":"/2023/11/28/%E6%8E%8C%E4%B8%8A%E9%AB%98%E8%80%83%E9%80%86%E5%90%91/","content":"一、掌上高考全国大学名单|排名排行榜|掌上高考 (gaokao.cn)1.需要逆向的值：\n表单参数：signsafe；\n\n2.逆向过程：\n收首先直接搜索关键字，再进行调试；\n\n\n\n\n此时可以定位到l，经过调试l即是我们的加密参数；\n具体就是v来处理了后面的内容，将主体方法拿下来。再进行相应的分析；\n将f值拿下来，在页面中他是写死的；此时就需要去找到j的生成；\n\nj = p(d)\n\n\n在上方我们发现了生成位置，但是在控制台输出后发现他输出的结果是未定义，那么其实它并不是在这里生成的；\n但其实观察一下就可以发现j值其实就是我们的路径和参数，在此其实可以直接拿下来；\n进入主体加密v的内部；\n\n\n\n\n将它拿下来，运行程序，报错d没有被定义，那么我们再去具体观察；\n有时我们会发现直接释放程序进不去我们的下一个断点，此时可以打上断点然后进行刷新，也可以走到v方法处再单步执行进入其内部，再进行释放即可正常释放；\nv方法对t进行了处理，观察其是一个内置方法，那么我们不用再去管他，直接将断点打在hmac处，在控制台输出d.a看看它是否是标准的加密；\n\n\n\n\n可以看出，他是标准的加密算法；那么直接导入算法包；再将d.a进行替换；\n再次运行报错f，那么可以猜测它就是标准加密；\n\n\n\n\n可以看到f()是一个md5加密，经过测试也可以发现是标准的加密；\n\n那么直接将其替换成CryptoJS.MD5(n)即可；再次运行即可实现加密；\n\n\n\n\n\n至此加密成功；\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"毛毛租逆向","url":"/2023/11/29/%E6%AF%9B%E6%AF%9B%E7%A7%9F%E9%80%86%E5%90%91/","content":"一、毛毛租【毛毛租_上海办公室出租_上海写字楼出租|办公楼租售信息平台】_上海毛毛租 (maomaozu.com)1.需要逆向的参数：\n表单：整体加密\n响应数据解密\n\n2.逆向过程：\n首先看表单加密，直接去跟栈看看；\n\n\n\n\n在这里这种特征其实就大概率是webpack，但不是每一次都要扣代码，这种情况可以直接点击r,request这个栈去跟，进入之后可以发现一个现象；\n\n\n\n\n无论如何跟栈他都是定位到这个位置，但是可以看到下方有一个源文件，这是一种反爬，在这里我们去使用关键字搜索法来看看能否进行定位；搜索encrypt(，可以发现有几处AES，我们打上断点之后分页；\n\n\n\n\n可以看到执行过后就是我们的加密参数，此时a就是我们的表单参数，那么去看看加密方法具体是做了什么，\n\n\n\n\n可以看到加密方法对e进行了处理，首先是this.k方法加密了一个0，然后this.e方法加密了e和上一个加密过后的0；\n\n\n\n\n可以看到e方法和k方法一个是md5一个是aes加密，那么直接将他们拿下来然后导包就可以了；\n\n\n\n\n将相应的参数补全后运行即可；\n参数加密完成后来对响应数据进行解密；在上方我们知道了加密方法是AES，那么其实数据解密大概也是一样的，在这里我们直接搜索decrypt(关键字，也是很快就可以定位到数据解密的位置；\n\n\n\n\n其实是同样的逻辑，我们可以看到在解密的时候传了一个a值，但他是对0做的处理，其实他是固定的，所以我们直接取上方的代码即可，进行导包替换即可完成解密；\n\n\n\n\n至此逆向完成；\n\n","categories":["参数加密&响应解密"],"tags":["web逆向"]},{"title":"新东方培训班逆向","url":"/2023/11/29/%E6%96%B0%E4%B8%9C%E6%96%B9%E9%80%86%E5%90%91/","content":"一、新东方培训班新东方培训班_新东方辅导课程 - 新东方搜课平台 (xdf.cn)1.需要逆向的值：\n请求头Sign签名；\n\n2.逆向过程：\n在此案例，很显然，可以通过关键词来搜索，但不用看这个词就很多，所以直接搜索路径再进行关键字搜索；\n搜索后进行定位，成功断住，断住后往下走一步，查看返回的sign是否是我们需要的值，运行后将其放掉，再去查看新发的包，可以看到这就是我们需要的东西；\n\n\n\n\n那么Re就是我们的主体加密；进入其内部查看；\n\n\n\n\n通过这里其实我们就可以发现，它进行了四次填充，所以他其实是md5加密；\n所以我们直接将拼接后的数据取下来，再进行加密即可；\n\n\n\n\n整体代码如下：\n\nconst CryptJS = require(&#x27;crypto-js&#x27;)md5_des = CryptJS.MD5(&#x27;appId=5053&amp;cityCode=500100&amp;t=1700145342864&amp;pageIndex=4&amp;pageSize=12&amp;categoryCode=54&amp;order=0750F82C2-D8F6-49F6-878C-1E7EBEBC8DA2&#x27;).toString();console.log(md5_des);\n\n","categories":["参数加密"],"tags":["web逆向"]},{"title":"爱拍逆向登录","url":"/2023/11/29/%E7%88%B1%E6%8B%8D%E9%80%86%E5%90%91%E7%99%BB%E5%BD%95/","content":"一、爱拍爱拍网 - 一站式视频创作软件丨超清录屏软件 (aipai.com)1.需要逆向的参数：\n表单参数：password，user\n\n2.逆向过程：\n首先直接搜索password，内容太多，加个：再搜索，进行断点定位；\n\n\n\n\n成功定位到加密位置，那我们来进行加密的逻辑分析，其实这个没什么好说的，进入函数内部看看，单步执行进入，发现传的是一个l，这个l就是我们的密码，那么直接将整个函数拿下来就行了；\n\n\n\n\nuser的话其实也在同一位置，我们分析看看；\n\n\n\n\n可以看到这五行就是我们的加密逻辑，将具体的参数都拿下来，然后进行分析，此时重点肯定就是JSEncrypt()这个函数，我们进去看看，又是一个webpack，我们直接将整个代码拿下来；\n\n运行发现报错，我们去看看我们使用的方法，是t(t);\n\n此时报错是因为没有导出加载器，我们导出一下，再进行替换，参数就成功解密；\n\n\n\n\n\n至此参数加密完成；\n\n","categories":["参数加密"],"tags":["登录逆向"]},{"title":"烯牛数据逆向","url":"/2023/11/29/%E7%83%AF%E7%89%9B%E6%95%B0%E6%8D%AE%E9%80%86%E5%90%91/","content":"一、烯牛数据最新赛道 · 烯牛数据 (xiniudata.com)1.需要逆向的值：\n表单有payload、sig两个加密的参数；\n返回的数据是密文；\n\n2.响应解密：\n首先进行分析，它的首页面其实是静态的，当你进行下滑或者切换页面时变成了动态页面，在此第一步我们先进行响应的解密；\n在此，我们使用JSON.parse(方法进行搜索，此方法与decrypt(均为关键字搜索法，搜索之后结果有些多，此时我们有两个解决方案：\n\n\n 从启动器进入，进入之后再进行搜索；\n 直接搜索路径，进入后再搜索关键字；\n\n\n注意：在搜索此方法时，有注意事项，如果括号里是内置的方法，那他很显然不带有解密的作用；\n此时有两个js文件都包含，我们经过调试，发现具体的位置在第二个js文件中；\n\n\n\n\n在控制台进行输出，发现就是我们需要的明文数据；将主体方法扣下来；经过调试，L是我们的密文数据，所以将它也拿下来；\n拿下来之后运行报错为Object(c.a)，选中整体进入函数内部，将方法的d1扣下来，随后的报错是一个道理；\n再次运行后报错_keyStr，进入具体的报错位置去调试，看看它怎么回事，在报错处打上断点调试，发现其是固定的值，将其拿下来；并且其实我们可以找到固定位置，__p其实也是固定的，在下方我们会用到；\n\n\n\n\n之后报错_p，同样的逻辑，不过此时必须先将上一步的断点释放，才能在__p处断住，发现也是一个具体的值，再次将其拿下；\n此时报错_u_d，很简单，再次去将方法拿下来；\n再次运行，数据成功解密；\n\n\n\n3.参数加密：\n一般来说，参数加密的关键词可以直接搜索，但比较普遍的不建议直接搜，同样可以搜索路径来定位，而在此经过调试也并没有那么好找，那么此时我们通过启动器进入再进行搜索；\n\n\n\n\n经过调试得知，p就是我们需要的sig值，那么将主体加密方法扣下来进行后续处理；\n将相应的值扣下来之后根据报错来补充，与数据解密的逻辑是相同的；\n将sig方法不上去之后，报错md5；\n\n\n\n\n乍一看好像是md5加密，但我们不是很确定，所以要具体看看；为何他不是标准算法，因为它是一个函数；\n但是进去调试之后，它似乎还是一个md5加密，在此我们进行验证，发现就是md5加密；具体是md5的大写加密；\n那么我们同样通过导包来实现：\n\nconst CryptoJS = require(&#x27;crypto&#x27;)function md5(text)&#123;    return CryptoJS.createHash(&#x27;md5&#x27;).update(text).digest(&#x27;hex&#x27;)&#125;\n\n\n运行，参数加密成功；\n\n\n\n\n如果观察仔细可以发现payload参数也不是一直不变的，但在上述代码其实已经生成了它，就是我们的f，打印它即可；\n\n","categories":["参数加密&响应解密"],"tags":["web逆向"]},{"title":"福建公共交易平台逆向","url":"/2023/11/30/%E7%A6%8F%E5%BB%BA%E5%85%AC%E5%85%B1%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%E9%80%86%E5%90%91/","content":"一、福建公共交易平台https://ggzyfw.fj.gov.cn/business/list/1.需要逆向的参数：\n请求头：portal-sign\n\n响应数据\n\n\n2.逆向过程：\n直接搜索关键字，打上断点；\n\n\n\n\n可以看到e就是我们的明文数据，那么我们直接去看它的加密方法；\n\n\n\n\n在这里直接将它扣下来，然后我们再去补缺失的方法，在这里可以看到有r[“a”]和 l(t)两个需要处理，前者其实就是一个固定的值，直接拿下来就可以了，后者是一个方法，我们直接去扣它就可以了；在前面没有提到的明文参数也需要拿下来，并且参数里有一个时间戳，在上方有他的定义，也一同扣下来，将具体的东西都补上后运行会报错u，那么我们进去看看它是什么方法；\n\n\n\n\n可以看到它是一个md5，我们不确定它是不是标准加密，所以我们去测试一下；\n\n\n\n\n\n\n可以看到他就是一个标准加密，那么我们直接就可以套用标准加密的库；\n\nconst CryptoJS = require(&#x27;crypto&#x27;)function md5(text)&#123;    return CryptoJS.createHash(&#x27;md5&#x27;).update(text).digest(&#x27;hex&#x27;)&#125;\n\n\n\n\n参数加密完成，接下来分析响应数据解密；\n直接搜索关键字，即可定位；\n\n\n\n\n可以看到，解密就是一个标准的AES，直接套用标准库即可；将相应的参数都拿下来运行即可解密；\n\n\n\n\n至此逆向完成；\n\n","categories":["参数加密&响应解密"],"tags":["web逆向"]},{"title":"看准网逆向","url":"/2023/11/29/%E7%9C%8B%E5%87%86%E7%BD%91%E9%80%86%E5%90%91/","content":"一、看准网【全国公司排行|排名榜单|哪家好】-看准网 (kanzhun.com)1.首先经过分析可以得知：\n表单的参数加密：\n\n​\t\t-b\n​\t\t-kiv\n\n返回的响应也是加密的；\n\n2.逆向过程：2.1 参数加密：\n首先我们利用搜索法，直接搜索kiv：关键词，定位到只有一个js文件，所以直接进入打断点，而后顺利断住；\n\n\n\n\n注意此时断点的位置，当你直接打在kiv旁边你会发现它无法精准打在你想要的位置，所以此时我们可以打在它的上方；\n\n在此调试发现b和kiv就在这里，那么我们看看它们分别是怎样生成的，在上方t就是b的生成，通过M.ma函数生成，那么我们点进去看看具体做了什么，\n\n\n\n\n\n可以发现就是一个h函数，在处理时传入了两个参数，e就是我们的分页参数，那么我们看看t值；通过调试发现t值是变化的，但其实我们要的是t里面的iv；\n那么此时我们就可以先看看iv值到底是怎样来的，其实我们通过分析可以看出，它的生成就在于这个M._A方法里；我们进去看看；\n\n\n\n\n进去具体的函数看看，并打上断点，可以看到它接受了一个16，并且他是做了一个随机的处理；\n\n\n\n\n可以将这个函数进行测试，将它整体拿下来，传一个16给它，可以发现每次都是一个随机值，那么这个iv我们就搞定了；\n此时将M.ma函数拿下来，他要传e和t，将他们分别拿下来，在前面我们已经知道，t里的iv值是随机的，那么刚刚我们已经成功生成了它，将它传入即可；\n运行后报错L，那我们去看看它是什么，将它拿下来，再次运行报错u，同样的道理；但是此时需要细致，再次运行报错o；\n那么很明显这个o，直接导包就行了；在最开始我们就可以看到，这个kiv其实就是等于iv，至此我们的参数加密就完成了；\n在我们导包后，确实生成了参数，但是我们发现b这个参数并没有随机而是固定的，那么很明显这是不对的，我们看看具体是哪里的问题；\n在进行调试后，其实我们b方法的主体生成并没有完全扣下来；\n\n\n\n\n将主体方法拿下来后进行相应的补全，就可以与python进行交互了；\n将生成的参数与python进行交互；\n\n\n\n\n通过我们模拟的参数发起请求可以看到正常返回数据，那么下一步我们就可以对它的响应来进行分析了；\n\n2.2 响应解密：\n数据解密还是搜索decrypt(,断点打上，断住之后检查一下，定位到具体位置；\n\n\n\n\n此时看看e值是什么，发现是一大串，那么很明显这就是我们要找的地方，当然，我们发现它还传入了一个t值，其实他就是上述分析的kiv，那么这个就很简单了，将整个方法扣下来，该替换就替换；\n\n\n\n\n至此所有逆向就完成了；\n\n","categories":["参数加密&响应解密"],"tags":["web逆向"]},{"title":"艺恩电影逆向","url":"/2023/11/29/%E8%89%BA%E6%81%A9%E6%95%B0%E6%8D%AE%E9%80%86%E5%90%91/","content":"一、艺恩艺恩-数据智能服务商_年度票房 (endata.com.cn)1.需要逆向的值：\n响应解密\n\n2.逆向过程：\n首先我们分析过后可以看出其堆栈是有一个ajax，在这种情况可以搜索JSON.parse(来找，搜索后发现数据有些多，所以我们先搜索其路径，再进行关键字搜索；\n搜索后打上断点，进行年份的切换；\n\n\n\n\n可以看出，e是我们的密文值，通过调试可以看出第二个为真正的解密方法，\n\n选中进入整个函数，发现其是混淆的，那就没有那么好辨别了；\n\n此时打上断点，通过刷新来进行断点，此时须将前面的断点给释放；之后再来进行调试；\n\n\n\n\n\n\n\n断住后执行单步调试，来看看程序是怎么走的；断点位置一定要对，因为经过调试程序是直接走到了var这一步，所以当我们断在this处时就没法正常的走；\n逐渐单步调试，观察作用域何时出现相应的密文值；\n\n\n\n\n当出现密文值时，可以进行观察，框住的地方很像我们某一个加密方式(对称加密)，将他们扣下来进行验证，在控制台输出时始终无法正确的输出，此时我们新建代码段，将这段代码复制过去，使用ctrl+s保存后运行，此时可以在控制台看到我们的明文结果；\n\n\n\n\n\n\n经过简单的调试我们可以知道，这就是一个DES加密，\n\n\n\n\n在这里由于是混淆的，我们选择将整个文件的代码都扣下来，因为它们其实是为一个整体；\n接下来执行webInstace.shell方法，为何会调用shell方法，是因为在此前调试的时候，我们在控制台执行混淆的代码时发现后续的混淆其实是shell方法；\n运行后报错navigator，其实这是由于环境的问题，在控制台输出后即可进行补环境操作，我测试过后，只补上ua即可；\n\n\n\n\n至此数据解密完成；\n\n","categories":["响应解密"],"tags":["web逆向"]},{"title":"考古加逆向","url":"/2023/11/30/%E8%80%83%E5%8F%A4%E5%8A%A0%E9%80%86%E5%90%91/","content":"一、考古加https://www.kaogujia.com/liveTopList/darenFansList/fansRise1.需要逆向的参数：\n返回的响应数据\n\n2.逆向过程：\n数据解密没有混淆直接搜索decrypt(关键词，直接定位到解密位置；\n\n\n\n\n在这里我们需要注意的是，它有两个数据接口，我们一定要确定我们的数据是哪一个接口；观察一下其实他就是标准加密，直接导包就可以了；再将相应的数据拿下来，即可完成解密；\n\n\n\n\n至此解密完成；\n\n","categories":["响应解密"],"tags":["web逆向"]},{"title":"逗游网逆向登录","url":"/2023/11/28/%E9%80%97%E6%B8%B8%E7%BD%91%E7%99%BB%E5%BD%95/","content":"一、逗游网https://www.doyo.cn/passport/login?next=https://www.doyo.cn/1.需要逆向的参数：\n表单：password\n\n2.逆向过程：\n直接跟栈；\n\n\n\n\n进入后可以很明显的看到我们的加密位置；\n\n\n\n\n首先是Sha1.hash这个方法对密码进行了加密，然后再使用同样的方法加密nonce、ts、和加密过的密码这三个参数相加的结果，那么这里会有两个新的参数，我们查看可以发现一个是时间戳，一个是密文，那么这里我们就需要去找那一个密文了；\n\n\n\n\n每一次登录的时候都会发两个包，那么这一个包就是我们需要的那两个参数，所以再进行密码的逆向时，首先需要去对这个包进行请求得到这两个值，在它的载荷里有两个参数；\n\n\n\n\n可以看到一个是我们的用户名，还有一个是随机值，我们可以自己生成它，因为是随机的，所以自己生成也是可以的，在这里我们去找找它的生成位置在哪里；\n\n\n\n\n可以看到它的生成其实就是一个随机值，那么在这里我们暂时将那两个参数固定使用；\n然后我们就可以去扣Sha1.hash这个方法了，进入内部，发现一共就一百多行，我们直接全扣；然后再次运行；\n\n\n\n\n参数逆向完成，只需要请求另一个包，拿到它的值，然后传递给js就可以了；\n\n","categories":["参数加密"],"tags":["登录逆向"]},{"title":"阿里房产逆向","url":"/2023/11/28/%E9%98%BF%E9%87%8C%E6%88%BF%E4%BA%A7%E9%80%86%E5%90%91/","content":"一、阿里房产阿里资产-房产频道 (taobao.com)1.需要逆向的参数：\n表单查询字符串参数：sign\n\n2.逆向过程：\n在这里我们依然使用关键词搜索法，搜索sign:，经过调试找到加密位置；\n\n\n\n\n此时我们可以看到sign是等于p，那我们去看看p在哪里；\n\n\n\n\n我们可以找到它的位置，并且将他们扣下来，在这里需要注意的是，他没有告诉我们它的加密方式，但我们可以通过某些特征来判断，在这里我们可以看到分组运算，那么大概率其实就是消息摘要算法；\n\n\n\n\n此时我们去看看具体加密了哪些东西，首先看o.token，它是从h5.request来的，大概率会是服务器返回的，我们在这里将它固定使用，其他的值我们均可以直接拿下来；\n拿下来之后运行即可得到我们想要的结果；\n\n\n\n\n至此加密完成；但是上方的token我们需要去看看怎样处理，搜索后发现它其实是响应返回的，我们可以先请求拿到他，再进行加密；\n\n","categories":["参数加密"],"tags":["web逆向"]}]